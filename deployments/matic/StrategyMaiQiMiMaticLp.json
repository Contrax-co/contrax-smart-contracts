{
  "address": "0xf34514260f18bDB3ED1142b69A6055F51089AC7D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfWant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHarvestable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "harvesters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepRewardMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterchef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mimatic",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceDevFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceDevMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceTreasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceTreasuryMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "qi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quick",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_harvesters",
          "type": "address[]"
        }
      ],
      "name": "revokeHarvesters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_keepReward",
          "type": "uint256"
        }
      ],
      "name": "setKeepReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_performanceDevFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_performanceTreasuryFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        }
      ],
      "name": "setStrategist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        }
      ],
      "name": "setTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalDevFundFee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalDevFundFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalTreasuryFee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushi_qi_mimatic_lp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uniswapRoutes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "univ2Router2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_harvesters",
          "type": "address[]"
        }
      ],
      "name": "whitelistHarvesters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawForSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalDevFundFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalDevFundMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalTreasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalTreasuryMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmatic",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x25c30a10e2fd03e0a6fd5c982b35d6a770685236a2d2c0607921cd6da1c6be5b",
  "receipt": {
    "to": null,
    "from": "0xaCfE4511CE883C14c4eA40563F176C3C09b4c47C",
    "contractAddress": "0xf34514260f18bDB3ED1142b69A6055F51089AC7D",
    "transactionIndex": 8,
    "gasUsed": "3343353",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000008000000000000000000000000000000000000000000000000000400000800000000100000000000100000000000000000000000000000000000000000000000000000000000080002040000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000400000000000000000000000000000000000000000100000",
    "blockHash": "0xe320c37fa0f590c399fbdc716c6210b6c49d678418d8cb2fe0522bf624037d32",
    "transactionHash": "0x25c30a10e2fd03e0a6fd5c982b35d6a770685236a2d2c0607921cd6da1c6be5b",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 16596945,
        "transactionHash": "0x25c30a10e2fd03e0a6fd5c982b35d6a770685236a2d2c0607921cd6da1c6be5b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000acfe4511ce883c14c4ea40563f176c3c09b4c47c",
          "0x000000000000000000000000ddb833b9e0e3f2f521480e7bcb3e676e0737047d"
        ],
        "data": "0x000000000000000000000000000000000000000000000000006ae6db47504a000000000000000000000000000000000000000000000002c7164cf3a5368b9fca0000000000000000000000000000000000000000000003ef3a4bc58d09d96b1b0000000000000000000000000000000000000000000002c715e20cc9ef3b55ca0000000000000000000000000000000000000000000003ef3ab6ac685129b51b",
        "logIndex": 15,
        "blockHash": "0xe320c37fa0f590c399fbdc716c6210b6c49d678418d8cb2fe0522bf624037d32"
      }
    ],
    "blockNumber": 16596945,
    "cumulativeGasUsed": "3604234",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9d074E37d408542FD38be78848e8814AFB38db17",
    "0xaCfE4511CE883C14c4eA40563F176C3C09b4c47C",
    "0x6847259b2B3A4c17e7c43C54409810aF48bA5210",
    "0xD92c7fAa0Ca0e6AE4918f3a83d9832d9CAEAA0d3"
  ],
  "solcInputHash": "8a2608861d997221c33b67a14712b94e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"harvesters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepRewardMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mimatic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceDevMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceTreasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"qi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quick\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_harvesters\",\"type\":\"address[]\"}],\"name\":\"revokeHarvesters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keepReward\",\"type\":\"uint256\"}],\"name\":\"setKeepReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceDevFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceTreasuryFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalDevFundFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalDevFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalTreasuryFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi_qi_mimatic_lp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapRoutes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"univ2Router2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_harvesters\",\"type\":\"address[]\"}],\"name\":\"whitelistHarvesters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalDevFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalDevFundMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalTreasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmatic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol\":\"StrategyMaiQiMiMaticLp\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/interfaces/controller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IController {\\n    function jars(address) external view returns (address);\\n\\n    function rewards() external view returns (address);\\n\\n    function devfund() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(address, uint256) external;\\n\\n    function earn(address, uint256) external;\\n}\\n\",\"keccak256\":\"0x9bb53e2a2752439a43100db0822214d177a107f2b6b665a9300d8a3a3b4c2e83\",\"license\":\"MIT\"},\"src/interfaces/jar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\nimport \\\"../lib/erc20.sol\\\";\\n\\ninterface IJar is IERC20 {\\n    function token() external view returns (address);\\n\\n    function claimInsurance() external; // NOTE: Only yDelegatedVault implements this\\n\\n    function getRatio() external view returns (uint256);\\n\\n    function depositAll() external;\\n\\n    function deposit(uint256) external;\\n\\n    function withdrawAll() external;\\n\\n    function withdraw(uint256) external;\\n\\n    function earn() external;\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x7081882ddcc489f6ee7de16268c8e517a29ee372933f649ee901183bcbcdc0ea\",\"license\":\"MIT\"},\"src/interfaces/masterchef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\ninterface IMasterchef {\\n    function BONUS_MULTIPLIER() external view returns (uint256);\\n\\n    function add(\\n        uint256 _allocPoint,\\n        address _lpToken,\\n        bool _withUpdate\\n    ) external;\\n\\n    function bonusEndBlock() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function dev(address _devaddr) external;\\n\\n    function devFundDivRate() external view returns (uint256);\\n\\n    function devaddr() external view returns (address);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function massUpdatePools() external;\\n\\n    function owner() external view returns (address);\\n\\n    function pendingPickle(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function pendingReward(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function pending(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function pickle() external view returns (address);\\n\\n    function picklePerBlock() external view returns (uint256);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accPicklePerShare\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function renounceOwnership() external;\\n\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) external;\\n\\n    function setBonusEndBlock(uint256 _bonusEndBlock) external;\\n\\n    function setDevFundDivRate(uint256 _devFundDivRate) external;\\n\\n    function setPicklePerBlock(uint256 _picklePerBlock) external;\\n\\n    function startBlock() external view returns (uint256);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function userInfo(uint256, address)\\n        external\\n        view\\n        returns (uint256 amount, uint256 rewardDebt);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x0dbf8ec01afd17f263ea5dddede1c14c7eb6845504c0cba7bfd684ec40489d28\",\"license\":\"MIT\"},\"src/interfaces/staking-rewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface IStakingRewards {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function exit() external;\\n\\n    function getReward() external;\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function lastUpdateTime() external view returns (uint256);\\n\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function periodFinish() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function rewardPerTokenStored() external view returns (uint256);\\n\\n    function rewardRate() external view returns (uint256);\\n\\n    function rewards(address) external view returns (uint256);\\n\\n    function rewardsDistribution() external view returns (address);\\n\\n    function rewardsDuration() external view returns (uint256);\\n\\n    function rewardsToken() external view returns (address);\\n\\n    function stake(uint256 amount) external;\\n\\n    function deposit(uint256 amount) external;\\n\\n    function stakeWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\\ninterface IStakingRewardsFactory {\\n    function deploy(address stakingToken, uint256 rewardAmount) external;\\n\\n    function isOwner() external view returns (bool);\\n\\n    function notifyRewardAmount(address stakingToken) external;\\n\\n    function notifyRewardAmounts() external;\\n\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function rewardsToken() external view returns (address);\\n\\n    function stakingRewardsGenesis() external view returns (uint256);\\n\\n    function stakingRewardsInfoByStakingToken(address)\\n        external\\n        view\\n        returns (address stakingRewards, uint256 rewardAmount);\\n\\n    function stakingTokens(uint256) external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xacb991932ac57c7cb8cf38e325cab2f99cd989c59a1d58a9490de4f29feee492\",\"license\":\"MIT\"},\"src/interfaces/uniswapv2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface UniswapRouterV2 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\\n\",\"keccak256\":\"0xecabda62bf3746ff37adaf912a5f1b21e2a3f752b13498723ab9984962390eb2\",\"license\":\"MIT\"},\"src/lib/context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"src/lib/erc20.sol\":{\"content\":\"\\n// File: contracts/GSN/Context.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./safe-math.sol\\\";\\nimport \\\"./context.sol\\\";\\n\\n// File: contracts/token/ERC20/IERC20.sol\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: contracts/utils/Address.sol\\n\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: contracts/token/ERC20/ERC20.sol\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x1562211f7af07954b97278eb6f56548ba1b901e28fe4baa442a466bbf388226a\",\"license\":\"MIT\"},\"src/lib/safe-math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x2e1df665169560627c2a0dce65572e63de974bb41c759cdeed973cd570b4d7cf\",\"license\":\"MIT\"},\"src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\nimport \\\"../strategy-general-masterchef-base.sol\\\";\\n\\ncontract StrategyMaiQiMiMaticLp is StrategyGeneralMasterChefBase {\\n    // Token addresses\\n    address public qi = 0x580A84C73811E1839F75d86d75d88cCa0c241fF4;\\n    address public masterChef = 0x574Fe4E8120C4Da1741b5Fd45584de7A5b521F0F;\\n    address public sushi_qi_mimatic_lp = 0x7AfcF11F3e2f01e71B7Cc6b8B5e707E42e6Ea397;\\n    address public mimatic = 0xa3Fa99A148fA48D14Ed51d610c367C61876997F1;\\n    address public quick = 0x831753DD7087CaC61aB5644b308642cc1c33Dc13;\\n    address public quickRouter = 0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n      public\\n      StrategyGeneralMasterChefBase(\\n        qi,\\n        masterChef,\\n        qi,\\n        mimatic,\\n        2, // pool id\\n        sushi_qi_mimatic_lp,\\n        _governance,\\n        _strategist,\\n        _controller,\\n        _timelock\\n      )\\n    {\\n      uniswapRoutes[mimatic] = [qi, mimatic];\\n      sushiRouter = quickRouter; // use quickswap router instead of sushi router\\n    }\\n\\n    // **** Views ****\\n\\n    function getName() external override pure returns (string memory) {\\n        return \\\"StrategyMaiQiMiMaticLp\\\";\\n    }\\n\\n    function getHarvestable() external override view returns (uint256) {\\n        uint256 _pendingReward = IMasterchef(masterchef).pending(poolId, address(this));\\n        return _pendingReward;\\n    }\\n}\\n\",\"keccak256\":\"0x6f815d2fc5a6955316220c0f0794d7fc3307b7fb7f5a88904189fedd2ec0d122\",\"license\":\"MIT\"},\"src/strategies/polygon/strategy-base.sol\":{\"content\":\"pragma solidity ^0.6.7;\\n\\nimport \\\"../../lib/erc20.sol\\\";\\nimport \\\"../../lib/safe-math.sol\\\";\\n\\nimport \\\"../../interfaces/jar.sol\\\";\\nimport \\\"../../interfaces/staking-rewards.sol\\\";\\nimport \\\"../../interfaces/masterchef.sol\\\";\\nimport \\\"../../interfaces/uniswapv2.sol\\\";\\nimport \\\"../../interfaces/controller.sol\\\";\\n\\n// Strategy Contract Basics\\n\\nabstract contract StrategyBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Perfomance fees - start with 20%\\n    uint256 public performanceTreasuryFee = 2000;\\n    uint256 public constant performanceTreasuryMax = 10000;\\n\\n    uint256 public performanceDevFee = 0;\\n    uint256 public constant performanceDevMax = 10000;\\n\\n    // Withdrawal fee 0%\\n    // - 0% to treasury\\n    // - 0% to dev fund\\n    uint256 public withdrawalTreasuryFee = 0;\\n    uint256 public constant withdrawalTreasuryMax = 100000;\\n\\n    uint256 public withdrawalDevFundFee = 0;\\n    uint256 public constant withdrawalDevFundMax = 100000;\\n\\n    // Tokens\\n    address public want;\\n    address public constant weth = 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619;\\n    address public constant wmatic = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\n\\n    // User accounts\\n    address public governance;\\n    address public controller;\\n    address public strategist;\\n    address public timelock;\\n\\n    // Dex - comethswap\\n    address public univ2Router2 = 0x93bcDc45f7e62f89a8e901DC4A0E2c6C427D9F25;\\n    address public sushiRouter = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\\n\\n    mapping(address => bool) public harvesters;\\n\\n    constructor(\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    ) public {\\n        require(_want != address(0));\\n        require(_governance != address(0));\\n        require(_strategist != address(0));\\n        require(_controller != address(0));\\n        require(_timelock != address(0));\\n\\n        want = _want;\\n        governance = _governance;\\n        strategist = _strategist;\\n        controller = _controller;\\n        timelock = _timelock;\\n    }\\n\\n    // **** Modifiers **** //\\n\\n    modifier onlyBenevolent {\\n        require(\\n            harvesters[msg.sender] ||\\n                msg.sender == governance ||\\n                msg.sender == strategist\\n        );\\n        _;\\n    }\\n\\n    // **** Views **** //\\n\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    function balanceOfPool() public virtual view returns (uint256);\\n\\n    function balanceOf() public view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    function getName() external virtual pure returns (string memory);\\n\\n    // **** Setters **** //\\n\\n    function whitelistHarvesters(address[] calldata _harvesters) external {\\n        require(msg.sender == governance ||\\n             msg.sender == strategist || harvesters[msg.sender], \\\"not authorized\\\");\\n             \\n        for (uint i = 0; i < _harvesters.length; i ++) {\\n            harvesters[_harvesters[i]] = true;\\n        }\\n    }\\n\\n    function revokeHarvesters(address[] calldata _harvesters) external {\\n        require(msg.sender == governance ||\\n             msg.sender == strategist, \\\"not authorized\\\");\\n\\n        for (uint i = 0; i < _harvesters.length; i ++) {\\n            harvesters[_harvesters[i]] = false;\\n        }\\n    }\\n\\n    function setWithdrawalDevFundFee(uint256 _withdrawalDevFundFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        withdrawalDevFundFee = _withdrawalDevFundFee;\\n    }\\n\\n    function setWithdrawalTreasuryFee(uint256 _withdrawalTreasuryFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        withdrawalTreasuryFee = _withdrawalTreasuryFee;\\n    }\\n\\n    function setPerformanceDevFee(uint256 _performanceDevFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        performanceDevFee = _performanceDevFee;\\n    }\\n\\n    function setPerformanceTreasuryFee(uint256 _performanceTreasuryFee)\\n        external\\n    {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        performanceTreasuryFee = _performanceTreasuryFee;\\n    }\\n\\n    function setStrategist(address _strategist) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        strategist = _strategist;\\n    }\\n\\n    function setGovernance(address _governance) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function setTimelock(address _timelock) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        timelock = _timelock;\\n    }\\n\\n    function setController(address _controller) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        controller = _controller;\\n    }\\n\\n    // **** State mutations **** //\\n    function deposit() public virtual;\\n\\n    // Controller only function for creating additional rewards from dust\\n    function withdraw(IERC20 _asset) external returns (uint256 balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        require(want != address(_asset), \\\"want\\\");\\n        balance = _asset.balanceOf(address(this));\\n        _asset.safeTransfer(controller, balance);\\n    }\\n\\n    // Withdraw partial funds, normally used with a jar withdrawal\\n    function withdraw(uint256 _amount) external {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        uint256 _balance = IERC20(want).balanceOf(address(this));\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        uint256 _feeDev = _amount.mul(withdrawalDevFundFee).div(\\n            withdrawalDevFundMax\\n        );\\n        IERC20(want).safeTransfer(IController(controller).devfund(), _feeDev);\\n\\n        uint256 _feeTreasury = _amount.mul(withdrawalTreasuryFee).div(\\n            withdrawalTreasuryMax\\n        );\\n        IERC20(want).safeTransfer(\\n            IController(controller).treasury(),\\n            _feeTreasury\\n        );\\n\\n        address _jar = IController(controller).jars(address(want));\\n        require(_jar != address(0), \\\"!jar\\\"); // additional protection so we don't burn the funds\\n\\n        IERC20(want).safeTransfer(_jar, _amount.sub(_feeDev).sub(_feeTreasury));\\n    }\\n\\n    // Withdraw funds, used to swap between strategies\\n    function withdrawForSwap(uint256 _amount)\\n        external\\n        returns (uint256 balance)\\n    {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawSome(_amount);\\n\\n        balance = IERC20(want).balanceOf(address(this));\\n\\n        address _jar = IController(controller).jars(address(want));\\n        require(_jar != address(0), \\\"!jar\\\");\\n        IERC20(want).safeTransfer(_jar, balance);\\n    }\\n\\n    // Withdraw all funds, normally used when migrating strategies\\n    function withdrawAll() external returns (uint256 balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawAll();\\n\\n        balance = IERC20(want).balanceOf(address(this));\\n\\n        address _jar = IController(controller).jars(address(want));\\n        require(_jar != address(0), \\\"!jar\\\"); // additional protection so we don't burn the funds\\n        IERC20(want).safeTransfer(_jar, balance);\\n    }\\n\\n    function _withdrawAll() internal {\\n        _withdrawSome(balanceOfPool());\\n    }\\n\\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\\n\\n    function harvest() public virtual;\\n\\n    // **** Emergency functions ****\\n\\n    function execute(address _target, bytes memory _data)\\n        public\\n        payable\\n        returns (bytes memory response)\\n    {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        require(_target != address(0), \\\"!target\\\");\\n\\n        // call contract in current context\\n        assembly {\\n            let succeeded := delegatecall(\\n                sub(gas(), 5000),\\n                _target,\\n                add(_data, 0x20),\\n                mload(_data),\\n                0,\\n                0\\n            )\\n            let size := returndatasize()\\n\\n            response := mload(0x40)\\n            mstore(\\n                0x40,\\n                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n            )\\n            mstore(response, size)\\n            returndatacopy(add(response, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n                case 1 {\\n                    // throw if delegatecall failed\\n                    revert(add(response, 0x20), size)\\n                }\\n        }\\n    }\\n\\n    // **** Internal functions ****\\n    function _swapUniswap(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(_to != address(0));\\n\\n        address[] memory path;\\n\\n        if (_from == weth || _to == weth) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = weth;\\n            path[2] = _to;\\n        }\\n\\n        IERC20(_from).safeApprove(univ2Router2, 0);\\n        IERC20(_from).safeApprove(univ2Router2, _amount);\\n        UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            now.add(60)\\n        );\\n    }\\n\\n    function _swapUniswapWithPath(\\n        address[] memory path,\\n        uint256 _amount\\n    ) internal {\\n        require(path[1] != address(0));\\n\\n        IERC20(path[0]).safeApprove(univ2Router2, 0);\\n        IERC20(path[0]).safeApprove(univ2Router2, _amount);\\n        UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            now.add(60)\\n        );\\n    }\\n\\n    function _swapSushiswap(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(_to != address(0));\\n\\n        address[] memory path;\\n\\n        if (_from == weth || _to == weth) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = weth;\\n            path[2] = _to;\\n        }\\n        \\n        IERC20(_from).safeApprove(sushiRouter, 0);\\n        IERC20(_from).safeApprove(sushiRouter, _amount);\\n        UniswapRouterV2(sushiRouter).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            now.add(60)\\n        );\\n    }\\n\\n    function _swapSushiswapWithPath(\\n        address[] memory path,\\n        uint256 _amount\\n    ) internal {\\n        require(path[1] != address(0));\\n\\n        IERC20(path[0]).safeApprove(sushiRouter, 0);\\n        IERC20(path[0]).safeApprove(sushiRouter, _amount);\\n        UniswapRouterV2(sushiRouter).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            now.add(60)\\n        );\\n    }\\n\\n    function _distributePerformanceFeesAndDeposit() internal {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n\\n        if (_want > 0) {\\n            // Treasury fees\\n            IERC20(want).safeTransfer(\\n                IController(controller).treasury(),\\n                _want.mul(performanceTreasuryFee).div(performanceTreasuryMax)\\n            );\\n\\n            // Performance fee\\n            IERC20(want).safeTransfer(\\n                IController(controller).devfund(),\\n                _want.mul(performanceDevFee).div(performanceDevMax)\\n            );\\n\\n            deposit();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa54af66a5b9f2101027b2923879a1dcddfbce281b1ed9c7ed4d0739f87e0dbd4\"},\"src/strategies/polygon/strategy-general-masterchef-base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\nimport \\\"./strategy-base.sol\\\";\\nimport \\\"../../interfaces/masterchef.sol\\\";\\n\\nabstract contract StrategyGeneralMasterChefBase is StrategyBase {\\n    // Token addresses\\n    address public masterchef;\\n    address public rewardToken;\\n\\n    address public token0;\\n    address public token1;\\n\\n    // How much TITAN tokens to keep?\\n    uint256 public keepReward = 0;\\n    uint256 public constant keepRewardMax = 10000;\\n\\n    // pool deposit fee\\n    uint256 public depositFee = 0;\\n\\n    uint256 public poolId;\\n    mapping (address => address[]) public uniswapRoutes;\\n\\n    constructor(\\n        address _rewardToken,\\n        address _masterchef,\\n        address _token0,\\n        address _token1,\\n        uint256 _poolId,\\n        address _lp,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyBase(\\n            _lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock\\n        )\\n    {\\n        poolId = _poolId;\\n        token0 = _token0;\\n        token1 = _token1;\\n        rewardToken = _rewardToken;\\n        masterchef = _masterchef;\\n    }\\n    \\n    function balanceOfPool() public override view returns (uint256) {\\n        (uint256 amount, ) = IMasterchef(masterchef).userInfo(poolId, address(this));\\n        return amount;\\n    }\\n\\n    function getHarvestable() external virtual view returns (uint256) {\\n        uint256 _pendingReward = IMasterchef(masterchef).pendingReward(poolId, address(this));\\n        return _pendingReward;\\n    }\\n\\n    // **** Setters ****\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(masterchef, 0);\\n            IERC20(want).safeApprove(masterchef, _want);\\n            IMasterchef(masterchef).deposit(poolId, _want);\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        IMasterchef(masterchef).withdraw(poolId, _amount);\\n        return _amount;\\n    }\\n\\n    // **** Setters ****\\n\\n    function setKeepReward(uint256 _keepReward) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        keepReward = _keepReward;\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // Collects SUSHI tokens\\n        IMasterchef(masterchef).withdraw(poolId, 0);\\n        uint256 _rewardBalance = IERC20(rewardToken).balanceOf(address(this));\\n        if (_rewardBalance > 0) {\\n            // 10% is locked up for future gov\\n            uint256 _keepReward = _rewardBalance.mul(keepReward).div(keepRewardMax);\\n            IERC20(rewardToken).safeApprove(IController(controller).treasury(), 0);\\n            IERC20(rewardToken).safeApprove(IController(controller).treasury(), _keepReward);\\n            IERC20(rewardToken).safeTransfer(\\n                IController(controller).treasury(),\\n                _keepReward\\n            );\\n        }\\n        \\n        uint256 remainingRewardBalance = IERC20(rewardToken).balanceOf(address(this));\\n\\n        if (remainingRewardBalance == 0) {\\n          return;\\n        }\\n        \\n        // allow Uniswap to sell our reward\\n        IERC20(rewardToken).safeApprove(sushiRouter, 0);\\n        IERC20(rewardToken).safeApprove(sushiRouter, remainingRewardBalance);\\n        \\n        uint256 toToken0 = remainingRewardBalance.div(2);\\n        uint256 toToken1 = remainingRewardBalance.sub(toToken0);\\n\\n        uint256 token0Amount;\\n        // we can accept 1 as minimum because this is called only by a trusted role\\n        uint256 amountOutMin = 1;\\n\\n        if (uniswapRoutes[token0].length > 1) {\\n            // if we need to liquidate the token0\\n            UniswapRouterV2(sushiRouter).swapExactTokensForTokens(\\n                toToken0,\\n                amountOutMin,\\n                uniswapRoutes[token0],\\n                address(this),\\n                block.timestamp\\n            );\\n            token0Amount = IERC20(token0).balanceOf(address(this));\\n        } else {\\n            // otherwise we assme token0 is the reward token itself\\n            token0Amount = toToken0;\\n        }\\n\\n        uint256 token1Amount;\\n\\n        if (uniswapRoutes[token1].length > 1) {\\n            // sell reward token to token1\\n            UniswapRouterV2(sushiRouter).swapExactTokensForTokens(\\n                toToken1,\\n                amountOutMin,\\n                uniswapRoutes[token1],\\n                address(this),\\n                block.timestamp\\n            );\\n            token1Amount = IERC20(token1).balanceOf(address(this));\\n        } else {\\n            token1Amount = toToken1;\\n        }\\n\\n        if (token0Amount > 0 && token1Amount > 0) {\\n            IERC20(token0).safeApprove(sushiRouter, 0);\\n            IERC20(token0).safeApprove(sushiRouter, token0Amount);\\n            IERC20(token1).safeApprove(sushiRouter, 0);\\n            IERC20(token1).safeApprove(sushiRouter, token1Amount);\\n\\n            UniswapRouterV2(sushiRouter).addLiquidity(\\n                token0,\\n                token1,\\n                token0Amount,\\n                token1Amount,\\n                0,\\n                0,\\n                address(this),\\n                now + 60\\n            );\\n\\n            // Donates DUST\\n            IERC20(token0).transfer(\\n                IController(controller).treasury(),\\n                IERC20(token0).balanceOf(address(this))\\n            );\\n            IERC20(token1).safeTransfer(\\n                IController(controller).treasury(),\\n                IERC20(token1).balanceOf(address(this))\\n            );\\n        }\\n\\n        // We want to get back SUSHI LP tokens\\n        _distributePerformanceFeesAndDeposit();\\n    }\\n}\\n\",\"keccak256\":\"0xedb457b7da29ccfd40c045b19888526d2035ff7811156dc8a9903b7be3fdf393\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526107d06000908155600181905560028190556003819055600980546001600160a01b03199081167393bcdc45f7e62f89a8e901dc4a0e2c6c427d9f2517909155600a80548216731b02da8cb0d097eb8d57a175b88c7d8b47997506179055601082905560119190915560148054821673580a84c73811e1839f75d86d75d88cca0c241ff417905560158054821673574fe4e8120c4da1741b5fd45584de7a5b521f0f179055601680548216737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea39717905560178054821673a3fa99a148fa48d14ed51d610c367c61876997f117905560188054821673831753dd7087cac61ab5644b308642cc1c33dc131790556019805490911673a5e0829caced8ffdd4de3c43696c57f7d7a678ff1790553480156200012f57600080fd5b50604051620035d0380380620035d0833981810160405260808110156200015557600080fd5b50805160208201516040830151606090930151601454601554601754601654959694956001600160a01b03938416939283169284928116916002911689898989848484848484620001a557600080fd5b6001600160a01b038416620001b957600080fd5b6001600160a01b038316620001cd57600080fd5b6001600160a01b038216620001e157600080fd5b6001600160a01b038116620001f557600080fd5b600480546001600160a01b03199081166001600160a01b03978816179091556005805482169587169590951790945560078054851693861693909317909255600680548416918516919091179055600880548316918416919091179055601297909755600e80548816998216999099179098555050600f80548516958716959095179094555050600d805482169584169590951790945550600c80549093169181169190911790915560408051808201825260145483168152601754909216602080840182905260009182526013905220620002d391600262000301565b5050601954600a80546001600160a01b0319166001600160a01b03909216919091179055506200038c915050565b82805482825590600052602060002090810192821562000359579160200282015b828111156200035957825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000322565b50620003679291506200036b565b5090565b5b80821115620003675780546001600160a01b03191681556001016200036c565b613234806200039c6000396000f3fe60806040526004361061036a5760003560e01c806382378594116101c6578063c39d4334116100f7578063e80028bf11610095578063fb1db2781161006f578063fb1db27814610b18578063fb41be1614610b2d578063fdd3a87914610b42578063fe1f8f7a146106b75761036a565b8063e80028bf14610624578063f77c479114610aee578063f7c618c114610b035761036a565b8063c7b9d530116100d1578063c7b9d53014610a7c578063d0e30db014610aaf578063d21220a714610ac4578063d33219b414610ad95761036a565b8063c39d433414610a13578063c6223e2614610a28578063c65e324214610a525761036a565b8063ab033ea911610164578063b9e374891161013e578063b9e37489146109a1578063bdacb303146109b6578063c1a3d44c146109e9578063c24d21eb146109fe5761036a565b8063ab033ea9146108c9578063ab73e433146108fc578063b1f55bd4146109265761036a565b806388993f22116101a057806388993f22146108575780638ccdbb701461086c5780638d252c621461088157806392eefe9b146108965761036a565b806382378594146107d1578063853828b6146107fb57806387976583146108105761036a565b80633fc8cef3116102a0578063575a86b21161023e5780635fcd6255116102185780635fcd62551461077d57806367a52793146107925780636d13582c146107a7578063722713f7146107bc5761036a565b8063575a86b21461073e57806359739ec4146107535780635aa6e675146107685761036a565b80634c2798ad1161027a5780634c2798ad146106cc5780634fe809cc1461062457806351cff8d9146106f657806351f3d0b8146107295761036a565b80633fc8cef31461068d5780634641257d146106a2578063479119be146106b75761036a565b80631f1fcd511161030d57806326e886c6116102e757806326e886c6146106245780632e1a7d4d1461063957806334571734146106635780633e0dc34e146106785761036a565b80631f1fcd51146105d05780631fe4a686146105e5578063249fb9b4146105fa5761036a565b80630e364fb6116103495780630e364fb614610400578063115880861461047d57806317d7de7c146104925780631cff79cd1461051c5761036a565b8062b70eb71461036f5780630547104d146103c45780630dfe1681146103eb575b600080fd5b34801561037b57600080fd5b506103a86004803603604081101561039257600080fd5b506001600160a01b038135169060200135610b57565b604080516001600160a01b039092168252519081900360200190f35b3480156103d057600080fd5b506103d9610b8c565b60408051918252519081900360200190f35b3480156103f757600080fd5b506103a8610c18565b34801561040c57600080fd5b5061047b6004803603602081101561042357600080fd5b810190602081018135600160201b81111561043d57600080fd5b82018360208201111561044f57600080fd5b803590602001918460208302840111600160201b8311171561047057600080fd5b509092509050610c27565b005b34801561048957600080fd5b506103d9610d01565b34801561049e57600080fd5b506104a7610d80565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104e15781810151838201526020016104c9565b50505050905090810190601f16801561050e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104a76004803603604081101561053257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561055c57600080fd5b82018360208201111561056e57600080fd5b803590602001918460018302840111600160201b8311171561058f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610db0945050505050565b3480156105dc57600080fd5b506103a8610e93565b3480156105f157600080fd5b506103a8610ea2565b34801561060657600080fd5b5061047b6004803603602081101561061d57600080fd5b5035610eb1565b34801561063057600080fd5b506103d9610f01565b34801561064557600080fd5b5061047b6004803603602081101561065c57600080fd5b5035610f07565b34801561066f57600080fd5b506103a861121a565b34801561068457600080fd5b506103d9611229565b34801561069957600080fd5b506103a861122f565b3480156106ae57600080fd5b5061047b611247565b3480156106c357600080fd5b506103d9611e51565b3480156106d857600080fd5b5061047b600480360360208110156106ef57600080fd5b5035611e58565b34801561070257600080fd5b506103d96004803603602081101561071957600080fd5b50356001600160a01b0316611ea8565b34801561073557600080fd5b506103d9611fd8565b34801561074a57600080fd5b506103a8611fde565b34801561075f57600080fd5b506103d9611fed565b34801561077457600080fd5b506103a8611ff3565b34801561078957600080fd5b506103a8612002565b34801561079e57600080fd5b506103d9612011565b3480156107b357600080fd5b506103a8612017565b3480156107c857600080fd5b506103d9612026565b3480156107dd57600080fd5b5061047b600480360360208110156107f457600080fd5b5035612046565b34801561080757600080fd5b506103d9612096565b34801561081c57600080fd5b506108436004803603602081101561083357600080fd5b50356001600160a01b031661224a565b604080519115158252519081900360200190f35b34801561086357600080fd5b506103d961225f565b34801561087857600080fd5b506103d9612265565b34801561088d57600080fd5b506103a861226b565b3480156108a257600080fd5b5061047b600480360360208110156108b957600080fd5b50356001600160a01b031661227a565b3480156108d557600080fd5b5061047b600480360360208110156108ec57600080fd5b50356001600160a01b03166122e7565b34801561090857600080fd5b5061047b6004803603602081101561091f57600080fd5b5035612356565b34801561093257600080fd5b5061047b6004803603602081101561094957600080fd5b810190602081018135600160201b81111561096357600080fd5b82018360208201111561097557600080fd5b803590602001918460208302840111600160201b8311171561099657600080fd5b5090925090506123a6565b3480156109ad57600080fd5b506103a8612461565b3480156109c257600080fd5b5061047b600480360360208110156109d957600080fd5b50356001600160a01b0316612470565b3480156109f557600080fd5b506103d96124dd565b348015610a0a57600080fd5b506103a861255d565b348015610a1f57600080fd5b506103d961256c565b348015610a3457600080fd5b506103d960048036036020811015610a4b57600080fd5b5035612572565b348015610a5e57600080fd5b5061047b60048036036020811015610a7557600080fd5b503561272a565b348015610a8857600080fd5b5061047b60048036036020811015610a9f57600080fd5b50356001600160a01b031661277a565b348015610abb57600080fd5b5061047b6127e9565b348015610ad057600080fd5b506103a8612915565b348015610ae557600080fd5b506103a8612924565b348015610afa57600080fd5b506103a8612933565b348015610b0f57600080fd5b506103a8612942565b348015610b2457600080fd5b506103a8612951565b348015610b3957600080fd5b506103a8612960565b348015610b4e57600080fd5b506103a8612978565b60136020528160005260406000208181548110610b7057fe5b6000918252602090912001546001600160a01b03169150829050565b600c546012546040805163e4c75c2760e01b815260048101929092523060248301525160009283926001600160a01b039091169163e4c75c2791604480820192602092909190829003018186803b158015610be657600080fd5b505afa158015610bfa573d6000803e3d6000fd5b505050506040513d6020811015610c1057600080fd5b505191505090565b600e546001600160a01b031681565b6005546001600160a01b0316331480610c4a57506007546001600160a01b031633145b80610c645750336000908152600b602052604090205460ff165b610ca6576040805162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b60005b81811015610cfc576001600b6000858585818110610cc357fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff1916911515919091179055600101610ca9565b505050565b600c54601254604080516393f1a40b60e01b81526004810192909252306024830152805160009384936001600160a01b03909116926393f1a40b92604480840193829003018186803b158015610d5657600080fd5b505afa158015610d6a573d6000803e3d6000fd5b505050506040513d6040811015610c1057600080fd5b604080518082019091526016815275053747261746567794d616951694d694d617469634c760541b602082015290565b6008546060906001600160a01b03163314610dfe576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b6001600160a01b038316610e43576040805162461bcd60e51b8152602060048201526007602482015266085d185c99d95d60ca1b604482015290519081900360640190fd5b600080835160208501866113885a03f43d6040519250601f19601f6020830101168301604052808352806000602085013e811560018114610e8357610e8a565b8160208501fd5b50505092915050565b6004546001600160a01b031681565b6007546001600160a01b031681565b6008546001600160a01b03163314610efc576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600055565b61271081565b6006546001600160a01b03163314610f54576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610fa357600080fd5b505afa158015610fb7573d6000803e3d6000fd5b505050506040513d6020811015610fcd57600080fd5b5051905081811015610ffa57610feb610fe68383612987565b6129d2565b9150610ff78282612a46565b91505b600061101e620186a061101860035486612aa090919063ffffffff16565b90612af9565b90506110b0600660009054906101000a90046001600160a01b03166001600160a01b0316638d8f1e676040518163ffffffff1660e01b815260040160206040518083038186803b15801561107157600080fd5b505afa158015611085573d6000803e3d6000fd5b505050506040513d602081101561109b57600080fd5b50516004546001600160a01b03169083612b3b565b60006110ce620186a061101860025487612aa090919063ffffffff16565b9050611121600660009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561107157600080fd5b6006546004805460408051636535246160e11b81526001600160a01b039283169381019390935251600093919091169163ca6a48c2916024808301926020929190829003018186803b15801561117657600080fd5b505afa15801561118a573d6000803e3d6000fd5b505050506040513d60208110156111a057600080fd5b505190506001600160a01b0381166111e8576040805162461bcd60e51b8152602060048083019190915260248201526310b530b960e11b604482015290519081900360640190fd5b61121381611200846111fa8988612987565b90612987565b6004546001600160a01b03169190612b3b565b5050505050565b6016546001600160a01b031681565b60125481565b737ceb23fd6bc0add59e62ac25578270cff1b9f61981565b336000908152600b602052604090205460ff168061126f57506005546001600160a01b031633145b8061128457506007546001600160a01b031633145b61128d57600080fd5b600c5460125460408051630441a3e760e41b8152600481019290925260006024830181905290516001600160a01b039093169263441a3e7092604480820193929182900301818387803b1580156112e357600080fd5b505af11580156112f7573d6000803e3d6000fd5b5050600d54604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b15801561134857600080fd5b505afa15801561135c573d6000803e3d6000fd5b505050506040513d602081101561137257600080fd5b50519050801561153857600061139961271061101860105485612aa090919063ffffffff16565b905061142c600660009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ec57600080fd5b505afa158015611400573d6000803e3d6000fd5b505050506040513d602081101561141657600080fd5b5051600d546001600160a01b0316906000612b8d565b600654604080516361d027b360e01b815290516114b1926001600160a01b0316916361d027b3916004808301926020929190829003018186803b15801561147257600080fd5b505afa158015611486573d6000803e3d6000fd5b505050506040513d602081101561149c57600080fd5b5051600d546001600160a01b03169083612b8d565b600654604080516361d027b360e01b81529051611536926001600160a01b0316916361d027b3916004808301926020929190829003018186803b1580156114f757600080fd5b505afa15801561150b573d6000803e3d6000fd5b505050506040513d602081101561152157600080fd5b5051600d546001600160a01b03169083612b3b565b505b600d54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561158357600080fd5b505afa158015611597573d6000803e3d6000fd5b505050506040513d60208110156115ad57600080fd5b50519050806115bd575050611e4f565b600a54600d546115db916001600160a01b0391821691166000612b8d565b600a54600d546115f8916001600160a01b03918216911683612b8d565b6000611605826002612af9565b905060006116138383612987565b600e546001600160a01b03166000908152601360205260408120549192509060019081101561185357600a54600e546001600160a01b039081166000908152601360205260409081902090516338ed173960e01b815260048101888152602482018690523060648301819052426084840181905260a060448501908152855460a4860181905296909716966338ed1739968c968a969095929160c490910190869080156116e957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116cb575b50509650505050505050600060405180830381600087803b15801561170d57600080fd5b505af1158015611721573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561174a57600080fd5b8101908080516040519392919084600160201b82111561176957600080fd5b90830190602082018581111561177e57600080fd5b82518660208202830111600160201b8211171561179a57600080fd5b82525081516020918201928201910280838360005b838110156117c75781810151838201526020016117af565b50505050919091016040818152600e546370a0823160e01b835230600484015290516001600160a01b0390911696506370a082319550602480830195506020945090925090829003018186803b15801561182057600080fd5b505afa158015611834573d6000803e3d6000fd5b505050506040513d602081101561184a57600080fd5b50519150611857565b8391505b600f546001600160a01b031660009081526013602052604081205460011015611a9157600a54600f546001600160a01b039081166000908152601360205260409081902090516338ed173960e01b815260048101888152602482018790523060648301819052426084840181905260a060448501908152855460a4860181905296909716966338ed1739968c968b969095929160c4909101908690801561192757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611909575b50509650505050505050600060405180830381600087803b15801561194b57600080fd5b505af115801561195f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561198857600080fd5b8101908080516040519392919084600160201b8211156119a757600080fd5b9083019060208201858111156119bc57600080fd5b82518660208202830111600160201b821117156119d857600080fd5b82525081516020918201928201910280838360005b83811015611a055781810151838201526020016119ed565b50505050919091016040818152600f546370a0823160e01b835230600484015290516001600160a01b0390911696506370a082319550602480830195506020945090925090829003018186803b158015611a5e57600080fd5b505afa158015611a72573d6000803e3d6000fd5b505050506040513d6020811015611a8857600080fd5b50519050611a94565b50825b600083118015611aa45750600081115b15611e3f57600a54600e54611ac7916001600160a01b0391821691166000612b8d565b600a54600e54611ae4916001600160a01b03918216911685612b8d565b600a54600f54611b02916001600160a01b0391821691166000612b8d565b600a54600f54611b1f916001600160a01b03918216911683612b8d565b600a54600e54600f546040805162e8e33760e81b81526001600160a01b0393841660048201529183166024830152604482018790526064820185905260006084830181905260a483018190523060c4840152603c420160e48401529051929093169263e8e3370092610104808401936060939083900390910190829087803b158015611baa57600080fd5b505af1158015611bbe573d6000803e3d6000fd5b505050506040513d6060811015611bd457600080fd5b5050600e54600654604080516361d027b360e01b815290516001600160a01b039384169363a9059cbb9316916361d027b3916004808301926020929190829003018186803b158015611c2557600080fd5b505afa158015611c39573d6000803e3d6000fd5b505050506040513d6020811015611c4f57600080fd5b5051600e54604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611c9c57600080fd5b505afa158015611cb0573d6000803e3d6000fd5b505050506040513d6020811015611cc657600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b158015611d1757600080fd5b505af1158015611d2b573d6000803e3d6000fd5b505050506040513d6020811015611d4157600080fd5b5050600654604080516361d027b360e01b81529051611e3f926001600160a01b0316916361d027b3916004808301926020929190829003018186803b158015611d8957600080fd5b505afa158015611d9d573d6000803e3d6000fd5b505050506040513d6020811015611db357600080fd5b5051600f54604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611e0057600080fd5b505afa158015611e14573d6000803e3d6000fd5b505050506040513d6020811015611e2a57600080fd5b5051600f546001600160a01b03169190612b3b565b611e47612ca0565b505050505050505b565b620186a081565b6008546001600160a01b03163314611ea3576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b601055565b6006546000906001600160a01b03163314611ef8576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6004546001600160a01b0383811691161415611f44576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b158015611f8a57600080fd5b505afa158015611f9e573d6000803e3d6000fd5b505050506040513d6020811015611fb457600080fd5b5051600654909150611fd3906001600160a01b03848116911683612b3b565b919050565b60035481565b6015546001600160a01b031681565b60005481565b6005546001600160a01b031681565b6014546001600160a01b031681565b60115481565b600a546001600160a01b031681565b6000612041612033610d01565b61203b6124dd565b90612a46565b905090565b6008546001600160a01b03163314612091576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600255565b6006546000906001600160a01b031633146120e6576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6120ee612e3b565b60048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561213a57600080fd5b505afa15801561214e573d6000803e3d6000fd5b505050506040513d602081101561216457600080fd5b50516006546004805460408051636535246160e11b81526001600160a01b03928316938101939093525193945060009392169163ca6a48c291602480820192602092909190829003018186803b1580156121bd57600080fd5b505afa1580156121d1573d6000803e3d6000fd5b505050506040513d60208110156121e757600080fd5b505190506001600160a01b03811661222f576040805162461bcd60e51b8152602060048083019190915260248201526310b530b960e11b604482015290519081900360640190fd5b600454612246906001600160a01b03168284612b3b565b5090565b600b6020526000908152604090205460ff1681565b60015481565b60025481565b6019546001600160a01b031681565b6008546001600160a01b031633146122c5576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314612334576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b031633146123a1576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600355565b6005546001600160a01b03163314806123c957506007546001600160a01b031633145b61240b576040805162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b60005b81811015610cfc576000600b600085858581811061242857fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff191691151591909117905560010161240e565b6009546001600160a01b031681565b6008546001600160a01b031633146124bb576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b15801561252c57600080fd5b505afa158015612540573d6000803e3d6000fd5b505050506040513d602081101561255657600080fd5b5051905090565b6017546001600160a01b031681565b60105481565b6006546000906001600160a01b031633146125c2576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6125cb826129d2565b5060048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561261857600080fd5b505afa15801561262c573d6000803e3d6000fd5b505050506040513d602081101561264257600080fd5b50516006546004805460408051636535246160e11b81526001600160a01b03928316938101939093525193945060009392169163ca6a48c291602480820192602092909190829003018186803b15801561269b57600080fd5b505afa1580156126af573d6000803e3d6000fd5b505050506040513d60208110156126c557600080fd5b505190506001600160a01b03811661270d576040805162461bcd60e51b8152602060048083019190915260248201526310b530b960e11b604482015290519081900360640190fd5b600454612724906001600160a01b03168284612b3b565b50919050565b6008546001600160a01b03163314612775576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600155565b6005546001600160a01b031633146127c7576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b15801561283857600080fd5b505afa15801561284c573d6000803e3d6000fd5b505050506040513d602081101561286257600080fd5b50519050801561291257600c5460045461288a916001600160a01b0391821691166000612b8d565b600c546004546128a7916001600160a01b03918216911683612b8d565b600c5460125460408051631c57762b60e31b8152600481019290925260248201849052516001600160a01b039092169163e2bbb1589160448082019260009290919082900301818387803b1580156128fe57600080fd5b505af1158015611213573d6000803e3d6000fd5b50565b600f546001600160a01b031681565b6008546001600160a01b031681565b6006546001600160a01b031681565b600d546001600160a01b031681565b600c546001600160a01b031681565b730d500b1d8e8ef31e21c99d1db9a6444d3adf127081565b6018546001600160a01b031681565b60006129c983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612e46565b90505b92915050565b600c5460125460408051630441a3e760e41b8152600481019290925260248201849052516000926001600160a01b03169163441a3e70916044808301928692919082900301818387803b158015612a2857600080fd5b505af1158015612a3c573d6000803e3d6000fd5b5093949350505050565b6000828201838110156129c9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082612aaf575060006129cc565b82820282848281612abc57fe5b04146129c95760405162461bcd60e51b815260040180806020018281038252602181526020018061317e6021913960400191505060405180910390fd5b60006129c983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612edd565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610cfc908490612f42565b801580612c13575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015612be557600080fd5b505afa158015612bf9573d6000803e3d6000fd5b505050506040513d6020811015612c0f57600080fd5b5051155b612c4e5760405162461bcd60e51b81526004018080602001828103825260368152602001806131c96036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610cfc908490612f42565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015612cef57600080fd5b505afa158015612d03573d6000803e3d6000fd5b505050506040513d6020811015612d1957600080fd5b50519050801561291257600654604080516361d027b360e01b81529051612dab926001600160a01b0316916361d027b3916004808301926020929190829003018186803b158015612d6957600080fd5b505afa158015612d7d573d6000803e3d6000fd5b505050506040513d6020811015612d9357600080fd5b50516000546112009061271090611018908690612aa0565b60065460408051638d8f1e6760e01b81529051612e33926001600160a01b031691638d8f1e67916004808301926020929190829003018186803b158015612df157600080fd5b505afa158015612e05573d6000803e3d6000fd5b505050506040513d6020811015612e1b57600080fd5b50516001546112009061271090611018908690612aa0565b6129126127e9565b612912610fe6610d01565b60008184841115612ed55760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612e9a578181015183820152602001612e82565b50505050905090810190601f168015612ec75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183612f2c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612e9a578181015183820152602001612e82565b506000838581612f3857fe5b0495945050505050565b6060612f97826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ff39092919063ffffffff16565b805190915015610cfc57808060200190516020811015612fb657600080fd5b5051610cfc5760405162461bcd60e51b815260040180806020018281038252602a81526020018061319f602a913960400191505060405180910390fd5b6060613002848460008561300a565b949350505050565b606061301585613177565b613066576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106130a55780518252601f199092019160209182019101613086565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613107576040519150601f19603f3d011682016040523d82523d6000602084013e61310c565b606091505b509150915081156131205791506130029050565b8051156131305780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315612e9a578181015183820152602001612e82565b3b15159056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220b6c561837b95c3a052a200482ab1114bb6d6672cd7a27f00d32ec5a36765106264736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061036a5760003560e01c806382378594116101c6578063c39d4334116100f7578063e80028bf11610095578063fb1db2781161006f578063fb1db27814610b18578063fb41be1614610b2d578063fdd3a87914610b42578063fe1f8f7a146106b75761036a565b8063e80028bf14610624578063f77c479114610aee578063f7c618c114610b035761036a565b8063c7b9d530116100d1578063c7b9d53014610a7c578063d0e30db014610aaf578063d21220a714610ac4578063d33219b414610ad95761036a565b8063c39d433414610a13578063c6223e2614610a28578063c65e324214610a525761036a565b8063ab033ea911610164578063b9e374891161013e578063b9e37489146109a1578063bdacb303146109b6578063c1a3d44c146109e9578063c24d21eb146109fe5761036a565b8063ab033ea9146108c9578063ab73e433146108fc578063b1f55bd4146109265761036a565b806388993f22116101a057806388993f22146108575780638ccdbb701461086c5780638d252c621461088157806392eefe9b146108965761036a565b806382378594146107d1578063853828b6146107fb57806387976583146108105761036a565b80633fc8cef3116102a0578063575a86b21161023e5780635fcd6255116102185780635fcd62551461077d57806367a52793146107925780636d13582c146107a7578063722713f7146107bc5761036a565b8063575a86b21461073e57806359739ec4146107535780635aa6e675146107685761036a565b80634c2798ad1161027a5780634c2798ad146106cc5780634fe809cc1461062457806351cff8d9146106f657806351f3d0b8146107295761036a565b80633fc8cef31461068d5780634641257d146106a2578063479119be146106b75761036a565b80631f1fcd511161030d57806326e886c6116102e757806326e886c6146106245780632e1a7d4d1461063957806334571734146106635780633e0dc34e146106785761036a565b80631f1fcd51146105d05780631fe4a686146105e5578063249fb9b4146105fa5761036a565b80630e364fb6116103495780630e364fb614610400578063115880861461047d57806317d7de7c146104925780631cff79cd1461051c5761036a565b8062b70eb71461036f5780630547104d146103c45780630dfe1681146103eb575b600080fd5b34801561037b57600080fd5b506103a86004803603604081101561039257600080fd5b506001600160a01b038135169060200135610b57565b604080516001600160a01b039092168252519081900360200190f35b3480156103d057600080fd5b506103d9610b8c565b60408051918252519081900360200190f35b3480156103f757600080fd5b506103a8610c18565b34801561040c57600080fd5b5061047b6004803603602081101561042357600080fd5b810190602081018135600160201b81111561043d57600080fd5b82018360208201111561044f57600080fd5b803590602001918460208302840111600160201b8311171561047057600080fd5b509092509050610c27565b005b34801561048957600080fd5b506103d9610d01565b34801561049e57600080fd5b506104a7610d80565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104e15781810151838201526020016104c9565b50505050905090810190601f16801561050e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104a76004803603604081101561053257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561055c57600080fd5b82018360208201111561056e57600080fd5b803590602001918460018302840111600160201b8311171561058f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610db0945050505050565b3480156105dc57600080fd5b506103a8610e93565b3480156105f157600080fd5b506103a8610ea2565b34801561060657600080fd5b5061047b6004803603602081101561061d57600080fd5b5035610eb1565b34801561063057600080fd5b506103d9610f01565b34801561064557600080fd5b5061047b6004803603602081101561065c57600080fd5b5035610f07565b34801561066f57600080fd5b506103a861121a565b34801561068457600080fd5b506103d9611229565b34801561069957600080fd5b506103a861122f565b3480156106ae57600080fd5b5061047b611247565b3480156106c357600080fd5b506103d9611e51565b3480156106d857600080fd5b5061047b600480360360208110156106ef57600080fd5b5035611e58565b34801561070257600080fd5b506103d96004803603602081101561071957600080fd5b50356001600160a01b0316611ea8565b34801561073557600080fd5b506103d9611fd8565b34801561074a57600080fd5b506103a8611fde565b34801561075f57600080fd5b506103d9611fed565b34801561077457600080fd5b506103a8611ff3565b34801561078957600080fd5b506103a8612002565b34801561079e57600080fd5b506103d9612011565b3480156107b357600080fd5b506103a8612017565b3480156107c857600080fd5b506103d9612026565b3480156107dd57600080fd5b5061047b600480360360208110156107f457600080fd5b5035612046565b34801561080757600080fd5b506103d9612096565b34801561081c57600080fd5b506108436004803603602081101561083357600080fd5b50356001600160a01b031661224a565b604080519115158252519081900360200190f35b34801561086357600080fd5b506103d961225f565b34801561087857600080fd5b506103d9612265565b34801561088d57600080fd5b506103a861226b565b3480156108a257600080fd5b5061047b600480360360208110156108b957600080fd5b50356001600160a01b031661227a565b3480156108d557600080fd5b5061047b600480360360208110156108ec57600080fd5b50356001600160a01b03166122e7565b34801561090857600080fd5b5061047b6004803603602081101561091f57600080fd5b5035612356565b34801561093257600080fd5b5061047b6004803603602081101561094957600080fd5b810190602081018135600160201b81111561096357600080fd5b82018360208201111561097557600080fd5b803590602001918460208302840111600160201b8311171561099657600080fd5b5090925090506123a6565b3480156109ad57600080fd5b506103a8612461565b3480156109c257600080fd5b5061047b600480360360208110156109d957600080fd5b50356001600160a01b0316612470565b3480156109f557600080fd5b506103d96124dd565b348015610a0a57600080fd5b506103a861255d565b348015610a1f57600080fd5b506103d961256c565b348015610a3457600080fd5b506103d960048036036020811015610a4b57600080fd5b5035612572565b348015610a5e57600080fd5b5061047b60048036036020811015610a7557600080fd5b503561272a565b348015610a8857600080fd5b5061047b60048036036020811015610a9f57600080fd5b50356001600160a01b031661277a565b348015610abb57600080fd5b5061047b6127e9565b348015610ad057600080fd5b506103a8612915565b348015610ae557600080fd5b506103a8612924565b348015610afa57600080fd5b506103a8612933565b348015610b0f57600080fd5b506103a8612942565b348015610b2457600080fd5b506103a8612951565b348015610b3957600080fd5b506103a8612960565b348015610b4e57600080fd5b506103a8612978565b60136020528160005260406000208181548110610b7057fe5b6000918252602090912001546001600160a01b03169150829050565b600c546012546040805163e4c75c2760e01b815260048101929092523060248301525160009283926001600160a01b039091169163e4c75c2791604480820192602092909190829003018186803b158015610be657600080fd5b505afa158015610bfa573d6000803e3d6000fd5b505050506040513d6020811015610c1057600080fd5b505191505090565b600e546001600160a01b031681565b6005546001600160a01b0316331480610c4a57506007546001600160a01b031633145b80610c645750336000908152600b602052604090205460ff165b610ca6576040805162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b60005b81811015610cfc576001600b6000858585818110610cc357fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff1916911515919091179055600101610ca9565b505050565b600c54601254604080516393f1a40b60e01b81526004810192909252306024830152805160009384936001600160a01b03909116926393f1a40b92604480840193829003018186803b158015610d5657600080fd5b505afa158015610d6a573d6000803e3d6000fd5b505050506040513d6040811015610c1057600080fd5b604080518082019091526016815275053747261746567794d616951694d694d617469634c760541b602082015290565b6008546060906001600160a01b03163314610dfe576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b6001600160a01b038316610e43576040805162461bcd60e51b8152602060048201526007602482015266085d185c99d95d60ca1b604482015290519081900360640190fd5b600080835160208501866113885a03f43d6040519250601f19601f6020830101168301604052808352806000602085013e811560018114610e8357610e8a565b8160208501fd5b50505092915050565b6004546001600160a01b031681565b6007546001600160a01b031681565b6008546001600160a01b03163314610efc576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600055565b61271081565b6006546001600160a01b03163314610f54576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610fa357600080fd5b505afa158015610fb7573d6000803e3d6000fd5b505050506040513d6020811015610fcd57600080fd5b5051905081811015610ffa57610feb610fe68383612987565b6129d2565b9150610ff78282612a46565b91505b600061101e620186a061101860035486612aa090919063ffffffff16565b90612af9565b90506110b0600660009054906101000a90046001600160a01b03166001600160a01b0316638d8f1e676040518163ffffffff1660e01b815260040160206040518083038186803b15801561107157600080fd5b505afa158015611085573d6000803e3d6000fd5b505050506040513d602081101561109b57600080fd5b50516004546001600160a01b03169083612b3b565b60006110ce620186a061101860025487612aa090919063ffffffff16565b9050611121600660009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561107157600080fd5b6006546004805460408051636535246160e11b81526001600160a01b039283169381019390935251600093919091169163ca6a48c2916024808301926020929190829003018186803b15801561117657600080fd5b505afa15801561118a573d6000803e3d6000fd5b505050506040513d60208110156111a057600080fd5b505190506001600160a01b0381166111e8576040805162461bcd60e51b8152602060048083019190915260248201526310b530b960e11b604482015290519081900360640190fd5b61121381611200846111fa8988612987565b90612987565b6004546001600160a01b03169190612b3b565b5050505050565b6016546001600160a01b031681565b60125481565b737ceb23fd6bc0add59e62ac25578270cff1b9f61981565b336000908152600b602052604090205460ff168061126f57506005546001600160a01b031633145b8061128457506007546001600160a01b031633145b61128d57600080fd5b600c5460125460408051630441a3e760e41b8152600481019290925260006024830181905290516001600160a01b039093169263441a3e7092604480820193929182900301818387803b1580156112e357600080fd5b505af11580156112f7573d6000803e3d6000fd5b5050600d54604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b15801561134857600080fd5b505afa15801561135c573d6000803e3d6000fd5b505050506040513d602081101561137257600080fd5b50519050801561153857600061139961271061101860105485612aa090919063ffffffff16565b905061142c600660009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ec57600080fd5b505afa158015611400573d6000803e3d6000fd5b505050506040513d602081101561141657600080fd5b5051600d546001600160a01b0316906000612b8d565b600654604080516361d027b360e01b815290516114b1926001600160a01b0316916361d027b3916004808301926020929190829003018186803b15801561147257600080fd5b505afa158015611486573d6000803e3d6000fd5b505050506040513d602081101561149c57600080fd5b5051600d546001600160a01b03169083612b8d565b600654604080516361d027b360e01b81529051611536926001600160a01b0316916361d027b3916004808301926020929190829003018186803b1580156114f757600080fd5b505afa15801561150b573d6000803e3d6000fd5b505050506040513d602081101561152157600080fd5b5051600d546001600160a01b03169083612b3b565b505b600d54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561158357600080fd5b505afa158015611597573d6000803e3d6000fd5b505050506040513d60208110156115ad57600080fd5b50519050806115bd575050611e4f565b600a54600d546115db916001600160a01b0391821691166000612b8d565b600a54600d546115f8916001600160a01b03918216911683612b8d565b6000611605826002612af9565b905060006116138383612987565b600e546001600160a01b03166000908152601360205260408120549192509060019081101561185357600a54600e546001600160a01b039081166000908152601360205260409081902090516338ed173960e01b815260048101888152602482018690523060648301819052426084840181905260a060448501908152855460a4860181905296909716966338ed1739968c968a969095929160c490910190869080156116e957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116cb575b50509650505050505050600060405180830381600087803b15801561170d57600080fd5b505af1158015611721573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561174a57600080fd5b8101908080516040519392919084600160201b82111561176957600080fd5b90830190602082018581111561177e57600080fd5b82518660208202830111600160201b8211171561179a57600080fd5b82525081516020918201928201910280838360005b838110156117c75781810151838201526020016117af565b50505050919091016040818152600e546370a0823160e01b835230600484015290516001600160a01b0390911696506370a082319550602480830195506020945090925090829003018186803b15801561182057600080fd5b505afa158015611834573d6000803e3d6000fd5b505050506040513d602081101561184a57600080fd5b50519150611857565b8391505b600f546001600160a01b031660009081526013602052604081205460011015611a9157600a54600f546001600160a01b039081166000908152601360205260409081902090516338ed173960e01b815260048101888152602482018790523060648301819052426084840181905260a060448501908152855460a4860181905296909716966338ed1739968c968b969095929160c4909101908690801561192757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611909575b50509650505050505050600060405180830381600087803b15801561194b57600080fd5b505af115801561195f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561198857600080fd5b8101908080516040519392919084600160201b8211156119a757600080fd5b9083019060208201858111156119bc57600080fd5b82518660208202830111600160201b821117156119d857600080fd5b82525081516020918201928201910280838360005b83811015611a055781810151838201526020016119ed565b50505050919091016040818152600f546370a0823160e01b835230600484015290516001600160a01b0390911696506370a082319550602480830195506020945090925090829003018186803b158015611a5e57600080fd5b505afa158015611a72573d6000803e3d6000fd5b505050506040513d6020811015611a8857600080fd5b50519050611a94565b50825b600083118015611aa45750600081115b15611e3f57600a54600e54611ac7916001600160a01b0391821691166000612b8d565b600a54600e54611ae4916001600160a01b03918216911685612b8d565b600a54600f54611b02916001600160a01b0391821691166000612b8d565b600a54600f54611b1f916001600160a01b03918216911683612b8d565b600a54600e54600f546040805162e8e33760e81b81526001600160a01b0393841660048201529183166024830152604482018790526064820185905260006084830181905260a483018190523060c4840152603c420160e48401529051929093169263e8e3370092610104808401936060939083900390910190829087803b158015611baa57600080fd5b505af1158015611bbe573d6000803e3d6000fd5b505050506040513d6060811015611bd457600080fd5b5050600e54600654604080516361d027b360e01b815290516001600160a01b039384169363a9059cbb9316916361d027b3916004808301926020929190829003018186803b158015611c2557600080fd5b505afa158015611c39573d6000803e3d6000fd5b505050506040513d6020811015611c4f57600080fd5b5051600e54604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611c9c57600080fd5b505afa158015611cb0573d6000803e3d6000fd5b505050506040513d6020811015611cc657600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b158015611d1757600080fd5b505af1158015611d2b573d6000803e3d6000fd5b505050506040513d6020811015611d4157600080fd5b5050600654604080516361d027b360e01b81529051611e3f926001600160a01b0316916361d027b3916004808301926020929190829003018186803b158015611d8957600080fd5b505afa158015611d9d573d6000803e3d6000fd5b505050506040513d6020811015611db357600080fd5b5051600f54604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611e0057600080fd5b505afa158015611e14573d6000803e3d6000fd5b505050506040513d6020811015611e2a57600080fd5b5051600f546001600160a01b03169190612b3b565b611e47612ca0565b505050505050505b565b620186a081565b6008546001600160a01b03163314611ea3576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b601055565b6006546000906001600160a01b03163314611ef8576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6004546001600160a01b0383811691161415611f44576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b158015611f8a57600080fd5b505afa158015611f9e573d6000803e3d6000fd5b505050506040513d6020811015611fb457600080fd5b5051600654909150611fd3906001600160a01b03848116911683612b3b565b919050565b60035481565b6015546001600160a01b031681565b60005481565b6005546001600160a01b031681565b6014546001600160a01b031681565b60115481565b600a546001600160a01b031681565b6000612041612033610d01565b61203b6124dd565b90612a46565b905090565b6008546001600160a01b03163314612091576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600255565b6006546000906001600160a01b031633146120e6576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6120ee612e3b565b60048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561213a57600080fd5b505afa15801561214e573d6000803e3d6000fd5b505050506040513d602081101561216457600080fd5b50516006546004805460408051636535246160e11b81526001600160a01b03928316938101939093525193945060009392169163ca6a48c291602480820192602092909190829003018186803b1580156121bd57600080fd5b505afa1580156121d1573d6000803e3d6000fd5b505050506040513d60208110156121e757600080fd5b505190506001600160a01b03811661222f576040805162461bcd60e51b8152602060048083019190915260248201526310b530b960e11b604482015290519081900360640190fd5b600454612246906001600160a01b03168284612b3b565b5090565b600b6020526000908152604090205460ff1681565b60015481565b60025481565b6019546001600160a01b031681565b6008546001600160a01b031633146122c5576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314612334576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b031633146123a1576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600355565b6005546001600160a01b03163314806123c957506007546001600160a01b031633145b61240b576040805162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b60005b81811015610cfc576000600b600085858581811061242857fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff191691151591909117905560010161240e565b6009546001600160a01b031681565b6008546001600160a01b031633146124bb576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b15801561252c57600080fd5b505afa158015612540573d6000803e3d6000fd5b505050506040513d602081101561255657600080fd5b5051905090565b6017546001600160a01b031681565b60105481565b6006546000906001600160a01b031633146125c2576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6125cb826129d2565b5060048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561261857600080fd5b505afa15801561262c573d6000803e3d6000fd5b505050506040513d602081101561264257600080fd5b50516006546004805460408051636535246160e11b81526001600160a01b03928316938101939093525193945060009392169163ca6a48c291602480820192602092909190829003018186803b15801561269b57600080fd5b505afa1580156126af573d6000803e3d6000fd5b505050506040513d60208110156126c557600080fd5b505190506001600160a01b03811661270d576040805162461bcd60e51b8152602060048083019190915260248201526310b530b960e11b604482015290519081900360640190fd5b600454612724906001600160a01b03168284612b3b565b50919050565b6008546001600160a01b03163314612775576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600155565b6005546001600160a01b031633146127c7576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b15801561283857600080fd5b505afa15801561284c573d6000803e3d6000fd5b505050506040513d602081101561286257600080fd5b50519050801561291257600c5460045461288a916001600160a01b0391821691166000612b8d565b600c546004546128a7916001600160a01b03918216911683612b8d565b600c5460125460408051631c57762b60e31b8152600481019290925260248201849052516001600160a01b039092169163e2bbb1589160448082019260009290919082900301818387803b1580156128fe57600080fd5b505af1158015611213573d6000803e3d6000fd5b50565b600f546001600160a01b031681565b6008546001600160a01b031681565b6006546001600160a01b031681565b600d546001600160a01b031681565b600c546001600160a01b031681565b730d500b1d8e8ef31e21c99d1db9a6444d3adf127081565b6018546001600160a01b031681565b60006129c983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612e46565b90505b92915050565b600c5460125460408051630441a3e760e41b8152600481019290925260248201849052516000926001600160a01b03169163441a3e70916044808301928692919082900301818387803b158015612a2857600080fd5b505af1158015612a3c573d6000803e3d6000fd5b5093949350505050565b6000828201838110156129c9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082612aaf575060006129cc565b82820282848281612abc57fe5b04146129c95760405162461bcd60e51b815260040180806020018281038252602181526020018061317e6021913960400191505060405180910390fd5b60006129c983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612edd565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610cfc908490612f42565b801580612c13575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015612be557600080fd5b505afa158015612bf9573d6000803e3d6000fd5b505050506040513d6020811015612c0f57600080fd5b5051155b612c4e5760405162461bcd60e51b81526004018080602001828103825260368152602001806131c96036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610cfc908490612f42565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015612cef57600080fd5b505afa158015612d03573d6000803e3d6000fd5b505050506040513d6020811015612d1957600080fd5b50519050801561291257600654604080516361d027b360e01b81529051612dab926001600160a01b0316916361d027b3916004808301926020929190829003018186803b158015612d6957600080fd5b505afa158015612d7d573d6000803e3d6000fd5b505050506040513d6020811015612d9357600080fd5b50516000546112009061271090611018908690612aa0565b60065460408051638d8f1e6760e01b81529051612e33926001600160a01b031691638d8f1e67916004808301926020929190829003018186803b158015612df157600080fd5b505afa158015612e05573d6000803e3d6000fd5b505050506040513d6020811015612e1b57600080fd5b50516001546112009061271090611018908690612aa0565b6129126127e9565b612912610fe6610d01565b60008184841115612ed55760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612e9a578181015183820152602001612e82565b50505050905090810190601f168015612ec75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183612f2c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612e9a578181015183820152602001612e82565b506000838581612f3857fe5b0495945050505050565b6060612f97826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ff39092919063ffffffff16565b805190915015610cfc57808060200190516020811015612fb657600080fd5b5051610cfc5760405162461bcd60e51b815260040180806020018281038252602a81526020018061319f602a913960400191505060405180910390fd5b6060613002848460008561300a565b949350505050565b606061301585613177565b613066576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106130a55780518252601f199092019160209182019101613086565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613107576040519150601f19603f3d011682016040523d82523d6000602084013e61310c565b606091505b509150915081156131205791506130029050565b8051156131305780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315612e9a578181015183820152602001612e82565b3b15159056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220b6c561837b95c3a052a200482ab1114bb6d6672cd7a27f00d32ec5a36765106264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26466,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "performanceTreasuryFee",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 26472,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "performanceDevFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 26478,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "withdrawalTreasuryFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 26484,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "withdrawalDevFundFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 26489,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "want",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 26497,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "governance",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 26499,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "controller",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 26501,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "strategist",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 26503,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "timelock",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 26506,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "univ2Router2",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 26509,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "sushiRouter",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 26513,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "harvesters",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 27636,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "masterchef",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 27638,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "rewardToken",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 27640,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "token0",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 27642,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "token1",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 27645,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "keepReward",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 27651,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "depositFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 27653,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "poolId",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 27658,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "uniswapRoutes",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 26362,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "qi",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 26365,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "masterChef",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 26368,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "sushi_qi_mimatic_lp",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 26371,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "mimatic",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 26374,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "quick",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 26377,
        "contract": "src/strategies/polygon/mai/strategy-qi-mimatic-lp.sol:StrategyMaiQiMiMaticLp",
        "label": "quickRouter",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}