{
  "address": "0xf0fD3eDF4008d471465A8ef5F6397760Fd623F74",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfWant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crv",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dai",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHarvestable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMostPremium",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "harvesters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepCRV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepCRVMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceDevFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceDevMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceTreasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceTreasuryMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_harvesters",
          "type": "address[]"
        }
      ],
      "name": "revokeHarvesters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_keepCRV",
          "type": "uint256"
        }
      ],
      "name": "setKeepCRV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_performanceDevFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_performanceTreasuryFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        }
      ],
      "name": "setStrategist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        }
      ],
      "name": "setTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalDevFundFee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalDevFundFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalTreasuryFee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "three_crv",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "three_gauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "three_pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "univ2Router2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_harvesters",
          "type": "address[]"
        }
      ],
      "name": "whitelistHarvesters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawForSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalDevFundFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalDevFundMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalTreasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalTreasuryMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmatic",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x66c8cdb0e15a28aaa787f4d141e025cefc730ccdd5308b0d45fa3a1d3345d925",
  "receipt": {
    "to": null,
    "from": "0xaCfE4511CE883C14c4eA40563F176C3C09b4c47C",
    "contractAddress": "0xf0fD3eDF4008d471465A8ef5F6397760Fd623F74",
    "transactionIndex": 74,
    "gasUsed": "3062582",
    "logsBloom": "0x
    "blockHash": "0x957e8778774797dc67eb7bcacdf469134914c977b522808863edca759c884ace",
    "transactionHash": "0x66c8cdb0e15a28aaa787f4d141e025cefc730ccdd5308b0d45fa3a1d3345d925",
    "logs": [
      {
        "transactionIndex": 74,
        "blockNumber": 16079202,
        "transactionHash": "0x66c8cdb0e15a28aaa787f4d141e025cefc730ccdd5308b0d45fa3a1d3345d925",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000acfe4511ce883c14c4ea40563f176c3c09b4c47c",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001466a10262a48000000000000000000000000000000000000000000000000000e02c568d017be200000000000000000000000000000000000000000000007d13843991bbe319a300000000000000000000000000000000000000000000000000cbc5b58a9ed76200000000000000000000000000000000000000000000007d1398a032be45be230",
        "logIndex": 179,
        "blockHash": "0x957e8778774797dc67eb7bcacdf469134914c977b522808863edca759c884ace"
      }
    ],
    "blockNumber": 16079202,
    "cumulativeGasUsed": "8140901",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaCfE4511CE883C14c4eA40563F176C3C09b4c47C",
    "0xaCfE4511CE883C14c4eA40563F176C3C09b4c47C",
    "0x83074F0aB8EDD2c1508D3F657CeB5F27f6092d09",
    "0x63A991b9c34D2590A411584799B030414C9b0D6F"
  ],
  "solcInputHash": "b4c218a3105c6a2dd467f518b045ef1f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostPremium\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"harvesters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepCRVMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceDevMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceTreasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_harvesters\",\"type\":\"address[]\"}],\"name\":\"revokeHarvesters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keepCRV\",\"type\":\"uint256\"}],\"name\":\"setKeepCRV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceDevFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceTreasuryFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalDevFundFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalDevFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalTreasuryFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"three_crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"three_gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"three_pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"univ2Router2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_harvesters\",\"type\":\"address[]\"}],\"name\":\"whitelistHarvesters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalDevFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalDevFundMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalTreasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmatic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol\":\"StrategyCurveAm3CRVv2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/interfaces/controller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IController {\\n    function jars(address) external view returns (address);\\n\\n    function rewards() external view returns (address);\\n\\n    function devfund() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(address, uint256) external;\\n\\n    function earn(address, uint256) external;\\n}\\n\",\"keccak256\":\"0x9bb53e2a2752439a43100db0822214d177a107f2b6b665a9300d8a3a3b4c2e83\",\"license\":\"MIT\"},\"src/interfaces/curve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\ninterface ICurveFi_2 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts)\\n        external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function balances(int128) external view returns (uint256);\\n}\\n\\ninterface ICurveFi_3 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts)\\n        external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function balances(uint256) external view returns (uint256);\\n}\\n\\ninterface ICurveFi_4 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    // stETH pool\\n    function add_liquidity(\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts)\\n        external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function balances(int128) external view returns (uint256);\\n}\\n\\ninterface ICurveZap_4 {\\n    function add_liquidity(\\n        uint256[4] calldata uamounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] calldata min_uamounts)\\n        external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata uamounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_uamount\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_uamount,\\n        bool donate_dust\\n    ) external;\\n\\n    function withdraw_donated_dust() external;\\n\\n    function coins(int128 arg0) external returns (address);\\n\\n    function underlying_coins(int128 arg0) external returns (address);\\n\\n    function curve() external returns (address);\\n\\n    function token() external returns (address);\\n}\\n\\ninterface ICurveZap {\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_uamount\\n    ) external;\\n}\\n\\ninterface ICurveFi_Polygon_3 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount, bool use_underlying)\\n        external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts)\\n        external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function balances(uint256) external view returns (uint256);\\n}\\n\\ninterface ICurveGauge {\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address addr) external;\\n\\n    function balanceOf(address arg0) external view returns (uint256);\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function withdraw(uint256 _value, bool claim_rewards) external;\\n\\n    function claim_rewards() external;\\n\\n    function claim_rewards(address addr) external;\\n\\n    function claimable_tokens(address addr) external returns (uint256);\\n\\n    function claimable_reward(address addr) external view returns (uint256);\\n\\n    function claimable_reward(address, address) external view returns (uint256);\\n\\n    function integrate_fraction(address arg0) external view returns (uint256);\\n}\\n\\ninterface ICurveMintr {\\n    function mint(address) external;\\n\\n    function minted(address arg0, address arg1) external view returns (uint256);\\n}\\n\\ninterface ICurveVotingEscrow {\\n    function locked(address arg0)\\n        external\\n        view\\n        returns (int128 amount, uint256 end);\\n\\n    function locked__end(address _addr) external view returns (uint256);\\n\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256 _unlock_time) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external returns (address);\\n}\\n\\ninterface ICurveSmartContractChecker {\\n    function wallets(address) external returns (bool);\\n\\n    function approveWallet(address _wallet) external;\\n}\\n\",\"keccak256\":\"0x3988a781b7fe107a8e058403c72a6ff139a7edbab1720006aab45cbefdaa64db\",\"license\":\"MIT\"},\"src/interfaces/jar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\nimport \\\"../lib/erc20.sol\\\";\\n\\ninterface IJar is IERC20 {\\n    function token() external view returns (address);\\n\\n    function claimInsurance() external; // NOTE: Only yDelegatedVault implements this\\n\\n    function getRatio() external view returns (uint256);\\n\\n    function depositAll() external;\\n\\n    function deposit(uint256) external;\\n\\n    function withdrawAll() external;\\n\\n    function withdraw(uint256) external;\\n\\n    function earn() external;\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x7081882ddcc489f6ee7de16268c8e517a29ee372933f649ee901183bcbcdc0ea\",\"license\":\"MIT\"},\"src/interfaces/masterchef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\ninterface IMasterchef {\\n    function BONUS_MULTIPLIER() external view returns (uint256);\\n\\n    function add(\\n        uint256 _allocPoint,\\n        address _lpToken,\\n        bool _withUpdate\\n    ) external;\\n\\n    function bonusEndBlock() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function dev(address _devaddr) external;\\n\\n    function devFundDivRate() external view returns (uint256);\\n\\n    function devaddr() external view returns (address);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function massUpdatePools() external;\\n\\n    function owner() external view returns (address);\\n\\n    function pendingPickle(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function pickle() external view returns (address);\\n\\n    function picklePerBlock() external view returns (uint256);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accPicklePerShare\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function renounceOwnership() external;\\n\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) external;\\n\\n    function setBonusEndBlock(uint256 _bonusEndBlock) external;\\n\\n    function setDevFundDivRate(uint256 _devFundDivRate) external;\\n\\n    function setPicklePerBlock(uint256 _picklePerBlock) external;\\n\\n    function startBlock() external view returns (uint256);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function userInfo(uint256, address)\\n        external\\n        view\\n        returns (uint256 amount, uint256 rewardDebt);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x1dc3a13ede3966476ef7be8c6ba32fa102900a176f4ed5adbf0b8f6714ed4009\",\"license\":\"MIT\"},\"src/interfaces/staking-rewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface IStakingRewards {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function exit() external;\\n\\n    function getReward() external;\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function lastUpdateTime() external view returns (uint256);\\n\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function periodFinish() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function rewardPerTokenStored() external view returns (uint256);\\n\\n    function rewardRate() external view returns (uint256);\\n\\n    function rewards(address) external view returns (uint256);\\n\\n    function rewardsDistribution() external view returns (address);\\n\\n    function rewardsDuration() external view returns (uint256);\\n\\n    function rewardsToken() external view returns (address);\\n\\n    function stake(uint256 amount) external;\\n\\n    function deposit(uint256 amount) external;\\n\\n    function stakeWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\\ninterface IStakingRewardsFactory {\\n    function deploy(address stakingToken, uint256 rewardAmount) external;\\n\\n    function isOwner() external view returns (bool);\\n\\n    function notifyRewardAmount(address stakingToken) external;\\n\\n    function notifyRewardAmounts() external;\\n\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function rewardsToken() external view returns (address);\\n\\n    function stakingRewardsGenesis() external view returns (uint256);\\n\\n    function stakingRewardsInfoByStakingToken(address)\\n        external\\n        view\\n        returns (address stakingRewards, uint256 rewardAmount);\\n\\n    function stakingTokens(uint256) external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xacb991932ac57c7cb8cf38e325cab2f99cd989c59a1d58a9490de4f29feee492\",\"license\":\"MIT\"},\"src/interfaces/uniswapv2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface UniswapRouterV2 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\\n\",\"keccak256\":\"0xecabda62bf3746ff37adaf912a5f1b21e2a3f752b13498723ab9984962390eb2\",\"license\":\"MIT\"},\"src/lib/context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"src/lib/erc20.sol\":{\"content\":\"\\n// File: contracts/GSN/Context.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./safe-math.sol\\\";\\nimport \\\"./context.sol\\\";\\n\\n// File: contracts/token/ERC20/IERC20.sol\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: contracts/utils/Address.sol\\n\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: contracts/token/ERC20/ERC20.sol\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x1562211f7af07954b97278eb6f56548ba1b901e28fe4baa442a466bbf388226a\",\"license\":\"MIT\"},\"src/lib/safe-math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x2e1df665169560627c2a0dce65572e63de974bb41c759cdeed973cd570b4d7cf\",\"license\":\"MIT\"},\"src/strategies/polygon/curve/strategy-base.sol\":{\"content\":\"pragma solidity ^0.6.7;\\n\\nimport \\\"../../../lib/erc20.sol\\\";\\nimport \\\"../../../lib/safe-math.sol\\\";\\n\\nimport \\\"../../../interfaces/jar.sol\\\";\\nimport \\\"../../../interfaces/staking-rewards.sol\\\";\\nimport \\\"../../../interfaces/masterchef.sol\\\";\\nimport \\\"../../../interfaces/uniswapv2.sol\\\";\\nimport \\\"../../../interfaces/controller.sol\\\";\\n\\n// Strategy Contract Basics\\n\\nabstract contract StrategyBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Perfomance fees - start with 20%\\n    uint256 public performanceTreasuryFee = 2000;\\n    uint256 public constant performanceTreasuryMax = 10000;\\n\\n    uint256 public performanceDevFee = 0;\\n    uint256 public constant performanceDevMax = 10000;\\n\\n    // Withdrawal fee 0%\\n    // - 0% to treasury\\n    // - 0% to dev fund\\n    uint256 public withdrawalTreasuryFee = 0;\\n    uint256 public constant withdrawalTreasuryMax = 100000;\\n\\n    uint256 public withdrawalDevFundFee = 0;\\n    uint256 public constant withdrawalDevFundMax = 100000;\\n\\n    // Tokens\\n    address public want;\\n    address public constant weth = 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619;\\n    address public constant wmatic = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\n\\n    // User accounts\\n    address public governance;\\n    address public controller;\\n    address public strategist;\\n    address public timelock;\\n\\n    // Dex - Sushiswap\\n    address public univ2Router2 = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\\n\\n    mapping(address => bool) public harvesters;\\n\\n    constructor(\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    ) public {\\n        require(_want != address(0));\\n        require(_governance != address(0));\\n        require(_strategist != address(0));\\n        require(_controller != address(0));\\n        require(_timelock != address(0));\\n\\n        want = _want;\\n        governance = _governance;\\n        strategist = _strategist;\\n        controller = _controller;\\n        timelock = _timelock;\\n    }\\n\\n    // **** Modifiers **** //\\n\\n    modifier onlyBenevolent {\\n        require(\\n            harvesters[msg.sender] ||\\n                msg.sender == governance ||\\n                msg.sender == strategist\\n        );\\n        _;\\n    }\\n\\n    // **** Views **** //\\n\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    function balanceOfPool() public virtual view returns (uint256);\\n\\n    function balanceOf() public view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    function getName() external virtual pure returns (string memory);\\n\\n    // **** Setters **** //\\n\\n    function whitelistHarvesters(address[] calldata _harvesters) external {\\n        require(msg.sender == governance ||\\n             msg.sender == strategist || harvesters[msg.sender], \\\"not authorized\\\");\\n             \\n        for (uint i = 0; i < _harvesters.length; i ++) {\\n            harvesters[_harvesters[i]] = true;\\n        }\\n    }\\n\\n    function revokeHarvesters(address[] calldata _harvesters) external {\\n        require(msg.sender == governance ||\\n             msg.sender == strategist, \\\"not authorized\\\");\\n\\n        for (uint i = 0; i < _harvesters.length; i ++) {\\n            harvesters[_harvesters[i]] = false;\\n        }\\n    }\\n\\n    function setWithdrawalDevFundFee(uint256 _withdrawalDevFundFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        withdrawalDevFundFee = _withdrawalDevFundFee;\\n    }\\n\\n    function setWithdrawalTreasuryFee(uint256 _withdrawalTreasuryFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        withdrawalTreasuryFee = _withdrawalTreasuryFee;\\n    }\\n\\n    function setPerformanceDevFee(uint256 _performanceDevFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        performanceDevFee = _performanceDevFee;\\n    }\\n\\n    function setPerformanceTreasuryFee(uint256 _performanceTreasuryFee)\\n        external\\n    {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        performanceTreasuryFee = _performanceTreasuryFee;\\n    }\\n\\n    function setStrategist(address _strategist) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        strategist = _strategist;\\n    }\\n\\n    function setGovernance(address _governance) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function setTimelock(address _timelock) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        timelock = _timelock;\\n    }\\n\\n    function setController(address _controller) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        controller = _controller;\\n    }\\n\\n    // **** State mutations **** //\\n    function deposit() public virtual;\\n\\n    // Controller only function for creating additional rewards from dust\\n    function withdraw(IERC20 _asset) external returns (uint256 balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        require(want != address(_asset), \\\"want\\\");\\n        balance = _asset.balanceOf(address(this));\\n        _asset.safeTransfer(controller, balance);\\n    }\\n\\n    // Withdraw partial funds, normally used with a jar withdrawal\\n    function withdraw(uint256 _amount) external {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        uint256 _balance = IERC20(want).balanceOf(address(this));\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        uint256 _feeDev = _amount.mul(withdrawalDevFundFee).div(\\n            withdrawalDevFundMax\\n        );\\n        IERC20(want).safeTransfer(IController(controller).devfund(), _feeDev);\\n\\n        uint256 _feeTreasury = _amount.mul(withdrawalTreasuryFee).div(\\n            withdrawalTreasuryMax\\n        );\\n        IERC20(want).safeTransfer(\\n            IController(controller).treasury(),\\n            _feeTreasury\\n        );\\n\\n        address _jar = IController(controller).jars(address(want));\\n        require(_jar != address(0), \\\"!jar\\\"); // additional protection so we don't burn the funds\\n\\n        IERC20(want).safeTransfer(_jar, _amount.sub(_feeDev).sub(_feeTreasury));\\n    }\\n\\n    // Withdraw funds, used to swap between strategies\\n    function withdrawForSwap(uint256 _amount)\\n        external\\n        returns (uint256 balance)\\n    {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawSome(_amount);\\n\\n        balance = IERC20(want).balanceOf(address(this));\\n\\n        address _jar = IController(controller).jars(address(want));\\n        require(_jar != address(0), \\\"!jar\\\");\\n        IERC20(want).safeTransfer(_jar, balance);\\n    }\\n\\n    // Withdraw all funds, normally used when migrating strategies\\n    function withdrawAll() external returns (uint256 balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawAll();\\n\\n        balance = IERC20(want).balanceOf(address(this));\\n\\n        address _jar = IController(controller).jars(address(want));\\n        require(_jar != address(0), \\\"!jar\\\"); // additional protection so we don't burn the funds\\n        IERC20(want).safeTransfer(_jar, balance);\\n    }\\n\\n    function _withdrawAll() internal {\\n        _withdrawSome(balanceOfPool());\\n    }\\n\\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\\n\\n    function harvest() public virtual;\\n\\n    // **** Emergency functions ****\\n\\n    function execute(address _target, bytes memory _data)\\n        public\\n        payable\\n        returns (bytes memory response)\\n    {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        require(_target != address(0), \\\"!target\\\");\\n\\n        // call contract in current context\\n        assembly {\\n            let succeeded := delegatecall(\\n                sub(gas(), 5000),\\n                _target,\\n                add(_data, 0x20),\\n                mload(_data),\\n                0,\\n                0\\n            )\\n            let size := returndatasize()\\n\\n            response := mload(0x40)\\n            mstore(\\n                0x40,\\n                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n            )\\n            mstore(response, size)\\n            returndatacopy(add(response, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n                case 1 {\\n                    // throw if delegatecall failed\\n                    revert(add(response, 0x20), size)\\n                }\\n        }\\n    }\\n\\n    // **** Internal functions ****\\n    function _swapUniswap(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(_to != address(0));\\n\\n        address[] memory path;\\n\\n        if (_from == weth || _to == weth) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = weth;\\n            path[2] = _to;\\n        }\\n\\n        UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            now.add(60)\\n        );\\n    }\\n\\n    function _swapUniswapWithPath(\\n        address[] memory path,\\n        uint256 _amount\\n    ) internal {\\n        require(path[1] != address(0));\\n\\n        UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            now.add(60)\\n        );\\n    }\\n\\n    function _distributePerformanceFeesAndDeposit() internal {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n\\n        if (_want > 0) {\\n            // Treasury fees\\n            IERC20(want).safeTransfer(\\n                IController(controller).treasury(),\\n                _want.mul(performanceTreasuryFee).div(performanceTreasuryMax)\\n            );\\n\\n            // Performance fee\\n            IERC20(want).safeTransfer(\\n                IController(controller).devfund(),\\n                _want.mul(performanceDevFee).div(performanceDevMax)\\n            );\\n\\n            deposit();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x892860316f90751f1d53665ca211159c8a4cb5851e2268488e4f36401df8a677\"},\"src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\nimport \\\"../../../lib/erc20.sol\\\";\\nimport \\\"../../../lib/safe-math.sol\\\";\\n\\nimport \\\"../../../interfaces/jar.sol\\\";\\nimport \\\"../../../interfaces/curve.sol\\\";\\nimport \\\"../../../interfaces/uniswapv2.sol\\\";\\nimport \\\"../../../interfaces/controller.sol\\\";\\n\\nimport \\\"./strategy-curve-base.sol\\\";\\n\\ncontract StrategyCurveAm3CRVv2 is StrategyCurveBase {\\n    // Curve stuff\\n    address public three_pool = 0x445FE580eF8d70FF569aB36e80c647af338db351;\\n    address public three_gauge = 0x19793B454D3AfC7b454F206Ffe95aDE26cA6912c;\\n    address public three_crv = 0xE7a24EF0C5e95Ffb0f6684b813A78F2a3AD7D171;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyCurveBase(\\n            three_pool,\\n            three_gauge,\\n            three_crv,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getMostPremium()\\n        public\\n        override\\n        view\\n        returns (address, uint256)\\n    {\\n        uint256[] memory balances = new uint256[](3);\\n        balances[0] = ICurveFi_Polygon_3(curve).balances(0); // DAI\\n        balances[1] = ICurveFi_Polygon_3(curve).balances(1).mul(10**12); // USDC\\n        balances[2] = ICurveFi_Polygon_3(curve).balances(2).mul(10**12); // USDT\\n\\n        // DAI\\n        if (\\n            balances[0] < balances[1] &&\\n            balances[0] < balances[2]\\n        ) {\\n            return (dai, 0);\\n        }\\n\\n        // USDC\\n        if (\\n            balances[1] < balances[0] &&\\n            balances[1] < balances[2]\\n        ) {\\n            return (usdc, 1);\\n        }\\n\\n        // USDT\\n        if (\\n            balances[2] < balances[0] &&\\n            balances[2] < balances[1]\\n        ) {\\n            return (usdt, 2);\\n        }\\n\\n        // If they're somehow equal, we just want DAI\\n        return (dai, 0);\\n    }\\n\\n    function getName() external override pure returns (string memory) {\\n        return \\\"StrategyCurve3CRVv2\\\";\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function harvest() public onlyBenevolent override {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // stablecoin we want to convert to\\n        (address to, uint256 toIndex) = getMostPremium();\\n\\n        ICurveGauge(gauge).claim_rewards(address(this));\\n\\n        uint256 _crv = IERC20(crv).balanceOf(address(this));\\n        if (_crv > 0) {\\n            IERC20(crv).safeApprove(univ2Router2, 0);\\n            IERC20(crv).safeApprove(univ2Router2, _crv);\\n            _swapUniswap(crv, to, _crv);\\n        }\\n\\n        uint256 _wmatic = IERC20(wmatic).balanceOf(address(this));\\n        if (_wmatic > 0) {\\n            IERC20(wmatic).safeApprove(univ2Router2, 0);\\n            IERC20(wmatic).safeApprove(univ2Router2, _wmatic);\\n\\n            _swapUniswap(wmatic, to, _wmatic);\\n        }\\n\\n        // Adds liquidity to curve.fi's pool\\n        // to get back want (scrv)\\n        uint256 _to = IERC20(to).balanceOf(address(this));\\n        if (_to > 0) {\\n            IERC20(to).safeApprove(curve, 0);\\n            IERC20(to).safeApprove(curve, _to);\\n            uint256[3] memory liquidity;\\n            liquidity[toIndex] = _to;\\n            ICurveFi_Polygon_3(curve).add_liquidity(liquidity, 0, true);\\n        }\\n\\n        _distributePerformanceFeesAndDeposit();\\n    }\\n}\\n\",\"keccak256\":\"0x6e6a5a8bfe414a6b18f082b1e2f91e897f4dc71da53acda6999e91d274e63cf8\",\"license\":\"MIT\"},\"src/strategies/polygon/curve/strategy-curve-base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\nimport \\\"./strategy-base.sol\\\";\\n\\nimport \\\"../../../interfaces/curve.sol\\\";\\n\\n// Base contract for Curve based staking contract interfaces\\n\\nabstract contract StrategyCurveBase is StrategyBase {\\n    // curve dao\\n    address public gauge;\\n    address public curve;\\n\\n    // stablecoins\\n    address public dai = 0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063;\\n    address public usdc = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    address public usdt = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n\\n    // rewards\\n    address public crv = 0x172370d5Cd63279eFa6d502DAB29171933a610AF;\\n\\n    // How much CRV tokens to keep\\n    uint256 public keepCRV = 0;\\n    uint256 public keepCRVMax = 10000;\\n\\n    constructor(\\n        address _curve,\\n        address _gauge,\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyBase(_want, _governance, _strategist, _controller, _timelock)\\n    {\\n        curve = _curve;\\n        gauge = _gauge;\\n    }\\n\\n    // **** Getters ****\\n\\n    function balanceOfPool() public override view returns (uint256) {\\n        return ICurveGauge(gauge).balanceOf(address(this));\\n    }\\n\\n    function getHarvestable() external returns (uint256) {\\n        return ICurveGauge(gauge).claimable_tokens(address(this));\\n    }\\n\\n    function getMostPremium() public virtual view returns (address, uint256);\\n\\n    // **** Setters ****\\n\\n    function setKeepCRV(uint256 _keepCRV) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        keepCRV = _keepCRV;\\n    }\\n\\n    // **** State Mutation functions ****\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(gauge, 0);\\n            IERC20(want).safeApprove(gauge, _want);\\n            ICurveGauge(gauge).deposit(_want);\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        ICurveGauge(gauge).withdraw(_amount);\\n        return _amount;\\n    }\\n}\\n\",\"keccak256\":\"0x0abd988eb5ed5f222e515c8060d3d93936323fee5e65c46340073d309d1766df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526107d06000908155600181905560028190556003819055600980546001600160a01b0319908116731b02da8cb0d097eb8d57a175b88c7d8b4799750617909155600d80548216738f3cf7ad23cd3cadbd9735aff958023239c6a063179055600e80548216732791bca1f2de4661ed88a30c99a7a9449aa84174179055600f8054821673c2132d05d31c914a87c6611c10748aeb04b58e8f17905560108054821673172370d5cd63279efa6d502dab29171933a610af17905560119190915561271060125560138054821673445fe580ef8d70ff569ab36e80c647af338db3511790556014805482167319793b454d3afc7b454f206ffe95ade26ca6912c1790556015805490911673e7a24ef0c5e95ffb0f6684b813a78f2a3ad7d1711790553480156200013057600080fd5b50604051620031c7380380620031c7833981810160405260808110156200015657600080fd5b50805160208201516040830151606090930151601354601454601554949593946001600160a01b03928316929182169116868686868484848484846200019b57600080fd5b6001600160a01b038416620001af57600080fd5b6001600160a01b038316620001c357600080fd5b6001600160a01b038216620001d757600080fd5b6001600160a01b038116620001eb57600080fd5b600480546001600160a01b03199081166001600160a01b03978816179091556005805482169587169590951790945560078054851693861693909317909255600680548416918516919091179055600880548316918416919091179055600c8054821699831699909917909855600b805490981696169590951790955550612f4297508796506200028595506000945050505050396000f3fe6080604052600436106102ff5760003560e01c806382ccf45b11610190578063bdacb303116100dc578063d25ff39711610095578063f4b9fa751161006f578063f4b9fa7514610a6d578063f77c479114610a82578063fb41be1614610a97578063fe1f8f7a146105fe576102ff565b8063d25ff39714610a2e578063d33219b414610a43578063e9751f6b14610a58576102ff565b8063bdacb3031461094a578063c1a3d44c1461097d578063c6223e2614610992578063c65e3242146109bc578063c7b9d530146109e6578063d0e30db014610a19576102ff565b806392eefe9b11610149578063ab033ea911610123578063ab033ea91461085d578063ab73e43314610890578063b1f55bd4146108ba578063b9e3748914610935576102ff565b806392eefe9b146107eb578063955383bd1461081e578063a6f19c8414610848576102ff565b806382ccf45b1461073b578063853828b614610750578063879765831461076557806388993f22146107ac5780638ab19830146107c15780638ccdbb70146107d6576102ff565b80634641257d1161024f57806359739ec4116102085780637165485d116101e25780637165485d146106d2578063722713f7146106e75780637fef901a146106fc5780638237859414610711576102ff565b806359739ec4146106935780635aa6e675146106a85780636a4874a1146106bd576102ff565b80634641257d146105e9578063479119be146105fe57806348677dbe146106135780634fe809cc1461056b57806351cff8d91461064b57806351f3d0b81461067e576102ff565b80631fe4a686116102bc5780632e1a7d4d116102965780632e1a7d4d146105805780632f48ab7d146105aa5780633e413bee146105bf5780633fc8cef3146105d4576102ff565b80631fe4a6861461052c578063249fb9b41461054157806326e886c61461056b576102ff565b80630547104d146103045780630e364fb61461032b57806311588086146103a857806317d7de7c146103bd5780631cff79cd146104475780631f1fcd51146104fb575b600080fd5b34801561031057600080fd5b50610319610aac565b60408051918252519081900360200190f35b34801561033757600080fd5b506103a66004803603602081101561034e57600080fd5b810190602081018135600160201b81111561036857600080fd5b82018360208201111561037a57600080fd5b803590602001918460208302840111600160201b8311171561039b57600080fd5b509092509050610b29565b005b3480156103b457600080fd5b50610319610c03565b3480156103c957600080fd5b506103d2610c62565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561040c5781810151838201526020016103f4565b50505050905090810190601f1680156104395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103d26004803603604081101561045d57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561048757600080fd5b82018360208201111561049957600080fd5b803590602001918460018302840111600160201b831117156104ba57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c8f945050505050565b34801561050757600080fd5b50610510610d72565b604080516001600160a01b039092168252519081900360200190f35b34801561053857600080fd5b50610510610d81565b34801561054d57600080fd5b506103a66004803603602081101561056457600080fd5b5035610d90565b34801561057757600080fd5b50610319610de0565b34801561058c57600080fd5b506103a6600480360360208110156105a357600080fd5b5035610de6565b3480156105b657600080fd5b506105106110f9565b3480156105cb57600080fd5b50610510611108565b3480156105e057600080fd5b50610510611117565b3480156105f557600080fd5b506103a661112f565b34801561060a57600080fd5b50610319611532565b34801561061f57600080fd5b50610628611539565b604080516001600160a01b03909316835260208301919091528051918290030190f35b34801561065757600080fd5b506103196004803603602081101561066e57600080fd5b50356001600160a01b031661187f565b34801561068a57600080fd5b506103196119af565b34801561069f57600080fd5b506103196119b5565b3480156106b457600080fd5b506105106119bb565b3480156106c957600080fd5b506105106119ca565b3480156106de57600080fd5b506105106119d9565b3480156106f357600080fd5b506103196119e8565b34801561070857600080fd5b50610319611a08565b34801561071d57600080fd5b506103a66004803603602081101561073457600080fd5b5035611a0e565b34801561074757600080fd5b50610510611a5e565b34801561075c57600080fd5b50610319611a6d565b34801561077157600080fd5b506107986004803603602081101561078857600080fd5b50356001600160a01b0316611c21565b604080519115158252519081900360200190f35b3480156107b857600080fd5b50610319611c36565b3480156107cd57600080fd5b50610510611c3c565b3480156107e257600080fd5b50610319611c4b565b3480156107f757600080fd5b506103a66004803603602081101561080e57600080fd5b50356001600160a01b0316611c51565b34801561082a57600080fd5b506103a66004803603602081101561084157600080fd5b5035611cbe565b34801561085457600080fd5b50610510611d10565b34801561086957600080fd5b506103a66004803603602081101561088057600080fd5b50356001600160a01b0316611d1f565b34801561089c57600080fd5b506103a6600480360360208110156108b357600080fd5b5035611d8e565b3480156108c657600080fd5b506103a6600480360360208110156108dd57600080fd5b810190602081018135600160201b8111156108f757600080fd5b82018360208201111561090957600080fd5b803590602001918460208302840111600160201b8311171561092a57600080fd5b509092509050611dde565b34801561094157600080fd5b50610510611e99565b34801561095657600080fd5b506103a66004803603602081101561096d57600080fd5b50356001600160a01b0316611ea8565b34801561098957600080fd5b50610319611f15565b34801561099e57600080fd5b50610319600480360360208110156109b557600080fd5b5035611f64565b3480156109c857600080fd5b506103a6600480360360208110156109df57600080fd5b503561211c565b3480156109f257600080fd5b506103a660048036036020811015610a0957600080fd5b50356001600160a01b031661216c565b348015610a2557600080fd5b506103a66121db565b348015610a3a57600080fd5b506105106122fd565b348015610a4f57600080fd5b5061051061230c565b348015610a6457600080fd5b5061031961231b565b348015610a7957600080fd5b50610510612321565b348015610a8e57600080fd5b50610510612330565b348015610aa357600080fd5b5061051061233f565b600b5460408051633313458360e01b815230600482015290516000926001600160a01b031691633313458391602480830192602092919082900301818787803b158015610af857600080fd5b505af1158015610b0c573d6000803e3d6000fd5b505050506040513d6020811015610b2257600080fd5b5051905090565b6005546001600160a01b0316331480610b4c57506007546001600160a01b031633145b80610b665750336000908152600a602052604090205460ff165b610ba8576040805162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b60005b81811015610bfe576001600a6000858585818110610bc557fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff1916911515919091179055600101610bab565b505050565b600b54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610c4e57600080fd5b505afa158015610b0c573d6000803e3d6000fd5b60408051808201909152601381527229ba3930ba32b3bca1bab93b3299a1a92b3b1960691b602082015290565b6008546060906001600160a01b03163314610cdd576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b6001600160a01b038316610d22576040805162461bcd60e51b8152602060048201526007602482015266085d185c99d95d60ca1b604482015290519081900360640190fd5b600080835160208501866113885a03f43d6040519250601f19601f6020830101168301604052808352806000602085013e811560018114610d6257610d69565b8160208501fd5b50505092915050565b6004546001600160a01b031681565b6007546001600160a01b031681565b6008546001600160a01b03163314610ddb576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600055565b61271081565b6006546001600160a01b03163314610e33576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610e8257600080fd5b505afa158015610e96573d6000803e3d6000fd5b505050506040513d6020811015610eac57600080fd5b5051905081811015610ed957610eca610ec58383612357565b6123a2565b9150610ed6828261240c565b91505b6000610efd620186a0610ef76003548661246690919063ffffffff16565b906124bf565b9050610f8f600660009054906101000a90046001600160a01b03166001600160a01b0316638d8f1e676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5057600080fd5b505afa158015610f64573d6000803e3d6000fd5b505050506040513d6020811015610f7a57600080fd5b50516004546001600160a01b03169083612501565b6000610fad620186a0610ef76002548761246690919063ffffffff16565b9050611000600660009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5057600080fd5b6006546004805460408051636535246160e11b81526001600160a01b039283169381019390935251600093919091169163ca6a48c2916024808301926020929190829003018186803b15801561105557600080fd5b505afa158015611069573d6000803e3d6000fd5b505050506040513d602081101561107f57600080fd5b505190506001600160a01b0381166110c7576040805162461bcd60e51b8152602060048083019190915260248201526310b530b960e11b604482015290519081900360640190fd5b6110f2816110df846110d98988612357565b90612357565b6004546001600160a01b03169190612501565b5050505050565b600f546001600160a01b031681565b600e546001600160a01b031681565b737ceb23fd6bc0add59e62ac25578270cff1b9f61981565b336000908152600a602052604090205460ff168061115757506005546001600160a01b031633145b8061116c57506007546001600160a01b031633145b61117557600080fd5b600080611180611539565b600b5460408051634274debf60e11b815230600482015290519395509193506001600160a01b0316916384e9bd7e9160248082019260009290919082900301818387803b1580156111d057600080fd5b505af11580156111e4573d6000803e3d6000fd5b5050601054604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b15801561123557600080fd5b505afa158015611249573d6000803e3d6000fd5b505050506040513d602081101561125f57600080fd5b5051905080156112bb57600954601054611287916001600160a01b0391821691166000612553565b6009546010546112a4916001600160a01b03918216911683612553565b6010546112bb906001600160a01b03168483612666565b604080516370a0823160e01b81523060048201529051600091730d500b1d8e8ef31e21c99d1db9a6444d3adf1270916370a0823191602480820192602092909190829003018186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d602081101561133a57600080fd5b5051905080156113bc5760095461137190730d500b1d8e8ef31e21c99d1db9a6444d3adf1270906001600160a01b03166000612553565b60095461139d90730d500b1d8e8ef31e21c99d1db9a6444d3adf1270906001600160a01b031683612553565b6113bc730d500b1d8e8ef31e21c99d1db9a6444d3adf12708583612666565b6000846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561140b57600080fd5b505afa15801561141f573d6000803e3d6000fd5b505050506040513d602081101561143557600080fd5b50519050801561152a57600c5461145a906001600160a01b0387811691166000612553565b600c54611474906001600160a01b03878116911683612553565b61147c612e6d565b8181866003811061148957fe5b6020020152600c546040516315b74c9d60e11b81526001600160a01b0390911690632b6e993a90839060009060019060040180846060808383885b838110156114dc5781810151838201526020016114c4565b5050505090500183815260200182151581526020019350505050600060405180830381600087803b15801561151057600080fd5b505af1158015611524573d6000803e3d6000fd5b50505050505b6110f2612990565b620186a081565b6040805160038082526080820190925260009182916060916020820183803683375050600c5460408051634903b0d160e01b81526000600482015290519394506001600160a01b0390911692634903b0d192506024808301926020929190829003018186803b1580156115ab57600080fd5b505afa1580156115bf573d6000803e3d6000fd5b505050506040513d60208110156115d557600080fd5b5051815182906000906115e457fe5b602090810291909101810191909152600c5460408051634903b0d160e01b81526001600482015290516116759364e8d4a51000936001600160a01b031692634903b0d19260248083019392829003018186803b15801561164357600080fd5b505afa158015611657573d6000803e3d6000fd5b505050506040513d602081101561166d57600080fd5b505190612466565b8160018151811061168257fe5b602090810291909101810191909152600c5460408051634903b0d160e01b81526002600482015290516116e19364e8d4a51000936001600160a01b031692634903b0d19260248083019392829003018186803b15801561164357600080fd5b816002815181106116ee57fe5b6020026020010181815250508060018151811061170757fe5b60200260200101518160008151811061171c57fe5b602002602001015110801561175857508060028151811061173957fe5b60200260200101518160008151811061174e57fe5b6020026020010151105b15611774575050600d546001600160a01b03169050600061187b565b8060008151811061178157fe5b60200260200101518160018151811061179657fe5b60200260200101511080156117d25750806002815181106117b357fe5b6020026020010151816001815181106117c857fe5b6020026020010151105b156117ee575050600e546001600160a01b03169050600161187b565b806000815181106117fb57fe5b60200260200101518160028151811061181057fe5b602002602001015110801561184c57508060018151811061182d57fe5b60200260200101518160028151811061184257fe5b6020026020010151105b15611868575050600f546001600160a01b03169050600261187b565b5050600d546001600160a01b0316905060005b9091565b6006546000906001600160a01b031633146118cf576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6004546001600160a01b038381169116141561191b576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561196157600080fd5b505afa158015611975573d6000803e3d6000fd5b505050506040513d602081101561198b57600080fd5b50516006549091506119aa906001600160a01b03848116911683612501565b919050565b60035481565b60005481565b6005546001600160a01b031681565b6010546001600160a01b031681565b600c546001600160a01b031681565b6000611a036119f5610c03565b6119fd611f15565b9061240c565b905090565b60115481565b6008546001600160a01b03163314611a59576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600255565b6015546001600160a01b031681565b6006546000906001600160a01b03163314611abd576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611ac5612b2b565b60048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015611b1157600080fd5b505afa158015611b25573d6000803e3d6000fd5b505050506040513d6020811015611b3b57600080fd5b50516006546004805460408051636535246160e11b81526001600160a01b03928316938101939093525193945060009392169163ca6a48c291602480820192602092909190829003018186803b158015611b9457600080fd5b505afa158015611ba8573d6000803e3d6000fd5b505050506040513d6020811015611bbe57600080fd5b505190506001600160a01b038116611c06576040805162461bcd60e51b8152602060048083019190915260248201526310b530b960e11b604482015290519081900360640190fd5b600454611c1d906001600160a01b03168284612501565b5090565b600a6020526000908152604090205460ff1681565b60015481565b6014546001600160a01b031681565b60025481565b6008546001600160a01b03163314611c9c576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314611d0b576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b601155565b600b546001600160a01b031681565b6005546001600160a01b03163314611d6c576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b03163314611dd9576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600355565b6005546001600160a01b0316331480611e0157506007546001600160a01b031633145b611e43576040805162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b60005b81811015610bfe576000600a6000858585818110611e6057fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff1916911515919091179055600101611e46565b6009546001600160a01b031681565b6008546001600160a01b03163314611ef3576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610c4e57600080fd5b6006546000906001600160a01b03163314611fb4576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611fbd826123a2565b5060048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561200a57600080fd5b505afa15801561201e573d6000803e3d6000fd5b505050506040513d602081101561203457600080fd5b50516006546004805460408051636535246160e11b81526001600160a01b03928316938101939093525193945060009392169163ca6a48c291602480820192602092909190829003018186803b15801561208d57600080fd5b505afa1580156120a1573d6000803e3d6000fd5b505050506040513d60208110156120b757600080fd5b505190506001600160a01b0381166120ff576040805162461bcd60e51b8152602060048083019190915260248201526310b530b960e11b604482015290519081900360640190fd5b600454612116906001600160a01b03168284612501565b50919050565b6008546001600160a01b03163314612167576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600155565b6005546001600160a01b031633146121b9576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b15801561222a57600080fd5b505afa15801561223e573d6000803e3d6000fd5b505050506040513d602081101561225457600080fd5b5051905080156122fa57600b5460045461227c916001600160a01b0391821691166000612553565b600b54600454612299916001600160a01b03918216911683612553565b600b546040805163b6b55f2560e01b81526004810184905290516001600160a01b039092169163b6b55f259160248082019260009290919082900301818387803b1580156122e657600080fd5b505af11580156110f2573d6000803e3d6000fd5b50565b6013546001600160a01b031681565b6008546001600160a01b031681565b60125481565b600d546001600160a01b031681565b6006546001600160a01b031681565b730d500b1d8e8ef31e21c99d1db9a6444d3adf127081565b600061239983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612b36565b90505b92915050565b600b5460408051632e1a7d4d60e01b81526004810184905290516000926001600160a01b031691632e1a7d4d916024808301928692919082900301818387803b1580156123ee57600080fd5b505af1158015612402573d6000803e3d6000fd5b5093949350505050565b600082820183811015612399576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000826124755750600061239c565b8282028284828161248257fe5b04146123995760405162461bcd60e51b8152600401808060200182810382526021815260200180612e8c6021913960400191505060405180910390fd5b600061239983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612bcd565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610bfe908490612c32565b8015806125d9575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156125ab57600080fd5b505afa1580156125bf573d6000803e3d6000fd5b505050506040513d60208110156125d557600080fd5b5051155b6126145760405162461bcd60e51b8152600401808060200182810382526036815260200180612ed76036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610bfe908490612c32565b6001600160a01b03821661267957600080fd5b60606001600160a01b038416737ceb23fd6bc0add59e62ac25578270cff1b9f61914806126c257506001600160a01b038316737ceb23fd6bc0add59e62ac25578270cff1b9f619145b1561274857604080516002808252606082018352909160208301908036833701905050905083816000815181106126f557fe5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061272357fe5b60200260200101906001600160a01b031690816001600160a01b031681525050612808565b604080516003808252608082019092529060208201606080368337019050509050838160008151811061277757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050737ceb23fd6bc0add59e62ac25578270cff1b9f619816001815181106127b957fe5b60200260200101906001600160a01b031690816001600160a01b03168152505082816002815181106127e757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b6009546001600160a01b03166338ed1739836000843061282942603c61240c565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612899578181015183820152602001612881565b505050509050019650505050505050600060405180830381600087803b1580156128c257600080fd5b505af11580156128d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156128ff57600080fd5b8101908080516040519392919084600160201b82111561291e57600080fd5b90830190602082018581111561293357600080fd5b82518660208202830111600160201b8211171561294f57600080fd5b82525081516020918201928201910280838360005b8381101561297c578181015183820152602001612964565b505050509050016040525050505050505050565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b1580156129df57600080fd5b505afa1580156129f3573d6000803e3d6000fd5b505050506040513d6020811015612a0957600080fd5b5051905080156122fa57600654604080516361d027b360e01b81529051612a9b926001600160a01b0316916361d027b3916004808301926020929190829003018186803b158015612a5957600080fd5b505afa158015612a6d573d6000803e3d6000fd5b505050506040513d6020811015612a8357600080fd5b50516000546110df9061271090610ef7908690612466565b60065460408051638d8f1e6760e01b81529051612b23926001600160a01b031691638d8f1e67916004808301926020929190829003018186803b158015612ae157600080fd5b505afa158015612af5573d6000803e3d6000fd5b505050506040513d6020811015612b0b57600080fd5b50516001546110df9061271090610ef7908690612466565b6122fa6121db565b6122fa610ec5610c03565b60008184841115612bc55760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b8a578181015183820152602001612b72565b50505050905090810190601f168015612bb75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183612c1c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612b8a578181015183820152602001612b72565b506000838581612c2857fe5b0495945050505050565b6060612c87826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ce39092919063ffffffff16565b805190915015610bfe57808060200190516020811015612ca657600080fd5b5051610bfe5760405162461bcd60e51b815260040180806020018281038252602a815260200180612ead602a913960400191505060405180910390fd5b6060612cf28484600085612cfa565b949350505050565b6060612d0585612e67565b612d56576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612d955780518252601f199092019160209182019101612d76565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612df7576040519150601f19603f3d011682016040523d82523d6000602084013e612dfc565b606091505b50915091508115612e10579150612cf29050565b805115612e205780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315612b8a578181015183820152602001612b72565b3b151590565b6040518060600160405280600390602082028036833750919291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212207c26f3157d080221ed7ad343aef5de22154dc99612f4e07f8122b5cce4b8417764736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106102ff5760003560e01c806382ccf45b11610190578063bdacb303116100dc578063d25ff39711610095578063f4b9fa751161006f578063f4b9fa7514610a6d578063f77c479114610a82578063fb41be1614610a97578063fe1f8f7a146105fe576102ff565b8063d25ff39714610a2e578063d33219b414610a43578063e9751f6b14610a58576102ff565b8063bdacb3031461094a578063c1a3d44c1461097d578063c6223e2614610992578063c65e3242146109bc578063c7b9d530146109e6578063d0e30db014610a19576102ff565b806392eefe9b11610149578063ab033ea911610123578063ab033ea91461085d578063ab73e43314610890578063b1f55bd4146108ba578063b9e3748914610935576102ff565b806392eefe9b146107eb578063955383bd1461081e578063a6f19c8414610848576102ff565b806382ccf45b1461073b578063853828b614610750578063879765831461076557806388993f22146107ac5780638ab19830146107c15780638ccdbb70146107d6576102ff565b80634641257d1161024f57806359739ec4116102085780637165485d116101e25780637165485d146106d2578063722713f7146106e75780637fef901a146106fc5780638237859414610711576102ff565b806359739ec4146106935780635aa6e675146106a85780636a4874a1146106bd576102ff565b80634641257d146105e9578063479119be146105fe57806348677dbe146106135780634fe809cc1461056b57806351cff8d91461064b57806351f3d0b81461067e576102ff565b80631fe4a686116102bc5780632e1a7d4d116102965780632e1a7d4d146105805780632f48ab7d146105aa5780633e413bee146105bf5780633fc8cef3146105d4576102ff565b80631fe4a6861461052c578063249fb9b41461054157806326e886c61461056b576102ff565b80630547104d146103045780630e364fb61461032b57806311588086146103a857806317d7de7c146103bd5780631cff79cd146104475780631f1fcd51146104fb575b600080fd5b34801561031057600080fd5b50610319610aac565b60408051918252519081900360200190f35b34801561033757600080fd5b506103a66004803603602081101561034e57600080fd5b810190602081018135600160201b81111561036857600080fd5b82018360208201111561037a57600080fd5b803590602001918460208302840111600160201b8311171561039b57600080fd5b509092509050610b29565b005b3480156103b457600080fd5b50610319610c03565b3480156103c957600080fd5b506103d2610c62565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561040c5781810151838201526020016103f4565b50505050905090810190601f1680156104395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103d26004803603604081101561045d57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561048757600080fd5b82018360208201111561049957600080fd5b803590602001918460018302840111600160201b831117156104ba57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c8f945050505050565b34801561050757600080fd5b50610510610d72565b604080516001600160a01b039092168252519081900360200190f35b34801561053857600080fd5b50610510610d81565b34801561054d57600080fd5b506103a66004803603602081101561056457600080fd5b5035610d90565b34801561057757600080fd5b50610319610de0565b34801561058c57600080fd5b506103a6600480360360208110156105a357600080fd5b5035610de6565b3480156105b657600080fd5b506105106110f9565b3480156105cb57600080fd5b50610510611108565b3480156105e057600080fd5b50610510611117565b3480156105f557600080fd5b506103a661112f565b34801561060a57600080fd5b50610319611532565b34801561061f57600080fd5b50610628611539565b604080516001600160a01b03909316835260208301919091528051918290030190f35b34801561065757600080fd5b506103196004803603602081101561066e57600080fd5b50356001600160a01b031661187f565b34801561068a57600080fd5b506103196119af565b34801561069f57600080fd5b506103196119b5565b3480156106b457600080fd5b506105106119bb565b3480156106c957600080fd5b506105106119ca565b3480156106de57600080fd5b506105106119d9565b3480156106f357600080fd5b506103196119e8565b34801561070857600080fd5b50610319611a08565b34801561071d57600080fd5b506103a66004803603602081101561073457600080fd5b5035611a0e565b34801561074757600080fd5b50610510611a5e565b34801561075c57600080fd5b50610319611a6d565b34801561077157600080fd5b506107986004803603602081101561078857600080fd5b50356001600160a01b0316611c21565b604080519115158252519081900360200190f35b3480156107b857600080fd5b50610319611c36565b3480156107cd57600080fd5b50610510611c3c565b3480156107e257600080fd5b50610319611c4b565b3480156107f757600080fd5b506103a66004803603602081101561080e57600080fd5b50356001600160a01b0316611c51565b34801561082a57600080fd5b506103a66004803603602081101561084157600080fd5b5035611cbe565b34801561085457600080fd5b50610510611d10565b34801561086957600080fd5b506103a66004803603602081101561088057600080fd5b50356001600160a01b0316611d1f565b34801561089c57600080fd5b506103a6600480360360208110156108b357600080fd5b5035611d8e565b3480156108c657600080fd5b506103a6600480360360208110156108dd57600080fd5b810190602081018135600160201b8111156108f757600080fd5b82018360208201111561090957600080fd5b803590602001918460208302840111600160201b8311171561092a57600080fd5b509092509050611dde565b34801561094157600080fd5b50610510611e99565b34801561095657600080fd5b506103a66004803603602081101561096d57600080fd5b50356001600160a01b0316611ea8565b34801561098957600080fd5b50610319611f15565b34801561099e57600080fd5b50610319600480360360208110156109b557600080fd5b5035611f64565b3480156109c857600080fd5b506103a6600480360360208110156109df57600080fd5b503561211c565b3480156109f257600080fd5b506103a660048036036020811015610a0957600080fd5b50356001600160a01b031661216c565b348015610a2557600080fd5b506103a66121db565b348015610a3a57600080fd5b506105106122fd565b348015610a4f57600080fd5b5061051061230c565b348015610a6457600080fd5b5061031961231b565b348015610a7957600080fd5b50610510612321565b348015610a8e57600080fd5b50610510612330565b348015610aa357600080fd5b5061051061233f565b600b5460408051633313458360e01b815230600482015290516000926001600160a01b031691633313458391602480830192602092919082900301818787803b158015610af857600080fd5b505af1158015610b0c573d6000803e3d6000fd5b505050506040513d6020811015610b2257600080fd5b5051905090565b6005546001600160a01b0316331480610b4c57506007546001600160a01b031633145b80610b665750336000908152600a602052604090205460ff165b610ba8576040805162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b60005b81811015610bfe576001600a6000858585818110610bc557fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff1916911515919091179055600101610bab565b505050565b600b54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610c4e57600080fd5b505afa158015610b0c573d6000803e3d6000fd5b60408051808201909152601381527229ba3930ba32b3bca1bab93b3299a1a92b3b1960691b602082015290565b6008546060906001600160a01b03163314610cdd576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b6001600160a01b038316610d22576040805162461bcd60e51b8152602060048201526007602482015266085d185c99d95d60ca1b604482015290519081900360640190fd5b600080835160208501866113885a03f43d6040519250601f19601f6020830101168301604052808352806000602085013e811560018114610d6257610d69565b8160208501fd5b50505092915050565b6004546001600160a01b031681565b6007546001600160a01b031681565b6008546001600160a01b03163314610ddb576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600055565b61271081565b6006546001600160a01b03163314610e33576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610e8257600080fd5b505afa158015610e96573d6000803e3d6000fd5b505050506040513d6020811015610eac57600080fd5b5051905081811015610ed957610eca610ec58383612357565b6123a2565b9150610ed6828261240c565b91505b6000610efd620186a0610ef76003548661246690919063ffffffff16565b906124bf565b9050610f8f600660009054906101000a90046001600160a01b03166001600160a01b0316638d8f1e676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5057600080fd5b505afa158015610f64573d6000803e3d6000fd5b505050506040513d6020811015610f7a57600080fd5b50516004546001600160a01b03169083612501565b6000610fad620186a0610ef76002548761246690919063ffffffff16565b9050611000600660009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5057600080fd5b6006546004805460408051636535246160e11b81526001600160a01b039283169381019390935251600093919091169163ca6a48c2916024808301926020929190829003018186803b15801561105557600080fd5b505afa158015611069573d6000803e3d6000fd5b505050506040513d602081101561107f57600080fd5b505190506001600160a01b0381166110c7576040805162461bcd60e51b8152602060048083019190915260248201526310b530b960e11b604482015290519081900360640190fd5b6110f2816110df846110d98988612357565b90612357565b6004546001600160a01b03169190612501565b5050505050565b600f546001600160a01b031681565b600e546001600160a01b031681565b737ceb23fd6bc0add59e62ac25578270cff1b9f61981565b336000908152600a602052604090205460ff168061115757506005546001600160a01b031633145b8061116c57506007546001600160a01b031633145b61117557600080fd5b600080611180611539565b600b5460408051634274debf60e11b815230600482015290519395509193506001600160a01b0316916384e9bd7e9160248082019260009290919082900301818387803b1580156111d057600080fd5b505af11580156111e4573d6000803e3d6000fd5b5050601054604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b15801561123557600080fd5b505afa158015611249573d6000803e3d6000fd5b505050506040513d602081101561125f57600080fd5b5051905080156112bb57600954601054611287916001600160a01b0391821691166000612553565b6009546010546112a4916001600160a01b03918216911683612553565b6010546112bb906001600160a01b03168483612666565b604080516370a0823160e01b81523060048201529051600091730d500b1d8e8ef31e21c99d1db9a6444d3adf1270916370a0823191602480820192602092909190829003018186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d602081101561133a57600080fd5b5051905080156113bc5760095461137190730d500b1d8e8ef31e21c99d1db9a6444d3adf1270906001600160a01b03166000612553565b60095461139d90730d500b1d8e8ef31e21c99d1db9a6444d3adf1270906001600160a01b031683612553565b6113bc730d500b1d8e8ef31e21c99d1db9a6444d3adf12708583612666565b6000846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561140b57600080fd5b505afa15801561141f573d6000803e3d6000fd5b505050506040513d602081101561143557600080fd5b50519050801561152a57600c5461145a906001600160a01b0387811691166000612553565b600c54611474906001600160a01b03878116911683612553565b61147c612e6d565b8181866003811061148957fe5b6020020152600c546040516315b74c9d60e11b81526001600160a01b0390911690632b6e993a90839060009060019060040180846060808383885b838110156114dc5781810151838201526020016114c4565b5050505090500183815260200182151581526020019350505050600060405180830381600087803b15801561151057600080fd5b505af1158015611524573d6000803e3d6000fd5b50505050505b6110f2612990565b620186a081565b6040805160038082526080820190925260009182916060916020820183803683375050600c5460408051634903b0d160e01b81526000600482015290519394506001600160a01b0390911692634903b0d192506024808301926020929190829003018186803b1580156115ab57600080fd5b505afa1580156115bf573d6000803e3d6000fd5b505050506040513d60208110156115d557600080fd5b5051815182906000906115e457fe5b602090810291909101810191909152600c5460408051634903b0d160e01b81526001600482015290516116759364e8d4a51000936001600160a01b031692634903b0d19260248083019392829003018186803b15801561164357600080fd5b505afa158015611657573d6000803e3d6000fd5b505050506040513d602081101561166d57600080fd5b505190612466565b8160018151811061168257fe5b602090810291909101810191909152600c5460408051634903b0d160e01b81526002600482015290516116e19364e8d4a51000936001600160a01b031692634903b0d19260248083019392829003018186803b15801561164357600080fd5b816002815181106116ee57fe5b6020026020010181815250508060018151811061170757fe5b60200260200101518160008151811061171c57fe5b602002602001015110801561175857508060028151811061173957fe5b60200260200101518160008151811061174e57fe5b6020026020010151105b15611774575050600d546001600160a01b03169050600061187b565b8060008151811061178157fe5b60200260200101518160018151811061179657fe5b60200260200101511080156117d25750806002815181106117b357fe5b6020026020010151816001815181106117c857fe5b6020026020010151105b156117ee575050600e546001600160a01b03169050600161187b565b806000815181106117fb57fe5b60200260200101518160028151811061181057fe5b602002602001015110801561184c57508060018151811061182d57fe5b60200260200101518160028151811061184257fe5b6020026020010151105b15611868575050600f546001600160a01b03169050600261187b565b5050600d546001600160a01b0316905060005b9091565b6006546000906001600160a01b031633146118cf576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6004546001600160a01b038381169116141561191b576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561196157600080fd5b505afa158015611975573d6000803e3d6000fd5b505050506040513d602081101561198b57600080fd5b50516006549091506119aa906001600160a01b03848116911683612501565b919050565b60035481565b60005481565b6005546001600160a01b031681565b6010546001600160a01b031681565b600c546001600160a01b031681565b6000611a036119f5610c03565b6119fd611f15565b9061240c565b905090565b60115481565b6008546001600160a01b03163314611a59576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600255565b6015546001600160a01b031681565b6006546000906001600160a01b03163314611abd576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611ac5612b2b565b60048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015611b1157600080fd5b505afa158015611b25573d6000803e3d6000fd5b505050506040513d6020811015611b3b57600080fd5b50516006546004805460408051636535246160e11b81526001600160a01b03928316938101939093525193945060009392169163ca6a48c291602480820192602092909190829003018186803b158015611b9457600080fd5b505afa158015611ba8573d6000803e3d6000fd5b505050506040513d6020811015611bbe57600080fd5b505190506001600160a01b038116611c06576040805162461bcd60e51b8152602060048083019190915260248201526310b530b960e11b604482015290519081900360640190fd5b600454611c1d906001600160a01b03168284612501565b5090565b600a6020526000908152604090205460ff1681565b60015481565b6014546001600160a01b031681565b60025481565b6008546001600160a01b03163314611c9c576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314611d0b576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b601155565b600b546001600160a01b031681565b6005546001600160a01b03163314611d6c576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b03163314611dd9576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600355565b6005546001600160a01b0316331480611e0157506007546001600160a01b031633145b611e43576040805162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b60005b81811015610bfe576000600a6000858585818110611e6057fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff1916911515919091179055600101611e46565b6009546001600160a01b031681565b6008546001600160a01b03163314611ef3576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610c4e57600080fd5b6006546000906001600160a01b03163314611fb4576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611fbd826123a2565b5060048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561200a57600080fd5b505afa15801561201e573d6000803e3d6000fd5b505050506040513d602081101561203457600080fd5b50516006546004805460408051636535246160e11b81526001600160a01b03928316938101939093525193945060009392169163ca6a48c291602480820192602092909190829003018186803b15801561208d57600080fd5b505afa1580156120a1573d6000803e3d6000fd5b505050506040513d60208110156120b757600080fd5b505190506001600160a01b0381166120ff576040805162461bcd60e51b8152602060048083019190915260248201526310b530b960e11b604482015290519081900360640190fd5b600454612116906001600160a01b03168284612501565b50919050565b6008546001600160a01b03163314612167576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600155565b6005546001600160a01b031633146121b9576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b15801561222a57600080fd5b505afa15801561223e573d6000803e3d6000fd5b505050506040513d602081101561225457600080fd5b5051905080156122fa57600b5460045461227c916001600160a01b0391821691166000612553565b600b54600454612299916001600160a01b03918216911683612553565b600b546040805163b6b55f2560e01b81526004810184905290516001600160a01b039092169163b6b55f259160248082019260009290919082900301818387803b1580156122e657600080fd5b505af11580156110f2573d6000803e3d6000fd5b50565b6013546001600160a01b031681565b6008546001600160a01b031681565b60125481565b600d546001600160a01b031681565b6006546001600160a01b031681565b730d500b1d8e8ef31e21c99d1db9a6444d3adf127081565b600061239983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612b36565b90505b92915050565b600b5460408051632e1a7d4d60e01b81526004810184905290516000926001600160a01b031691632e1a7d4d916024808301928692919082900301818387803b1580156123ee57600080fd5b505af1158015612402573d6000803e3d6000fd5b5093949350505050565b600082820183811015612399576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000826124755750600061239c565b8282028284828161248257fe5b04146123995760405162461bcd60e51b8152600401808060200182810382526021815260200180612e8c6021913960400191505060405180910390fd5b600061239983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612bcd565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610bfe908490612c32565b8015806125d9575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156125ab57600080fd5b505afa1580156125bf573d6000803e3d6000fd5b505050506040513d60208110156125d557600080fd5b5051155b6126145760405162461bcd60e51b8152600401808060200182810382526036815260200180612ed76036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610bfe908490612c32565b6001600160a01b03821661267957600080fd5b60606001600160a01b038416737ceb23fd6bc0add59e62ac25578270cff1b9f61914806126c257506001600160a01b038316737ceb23fd6bc0add59e62ac25578270cff1b9f619145b1561274857604080516002808252606082018352909160208301908036833701905050905083816000815181106126f557fe5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061272357fe5b60200260200101906001600160a01b031690816001600160a01b031681525050612808565b604080516003808252608082019092529060208201606080368337019050509050838160008151811061277757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050737ceb23fd6bc0add59e62ac25578270cff1b9f619816001815181106127b957fe5b60200260200101906001600160a01b031690816001600160a01b03168152505082816002815181106127e757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b6009546001600160a01b03166338ed1739836000843061282942603c61240c565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612899578181015183820152602001612881565b505050509050019650505050505050600060405180830381600087803b1580156128c257600080fd5b505af11580156128d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156128ff57600080fd5b8101908080516040519392919084600160201b82111561291e57600080fd5b90830190602082018581111561293357600080fd5b82518660208202830111600160201b8211171561294f57600080fd5b82525081516020918201928201910280838360005b8381101561297c578181015183820152602001612964565b505050509050016040525050505050505050565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b1580156129df57600080fd5b505afa1580156129f3573d6000803e3d6000fd5b505050506040513d6020811015612a0957600080fd5b5051905080156122fa57600654604080516361d027b360e01b81529051612a9b926001600160a01b0316916361d027b3916004808301926020929190829003018186803b158015612a5957600080fd5b505afa158015612a6d573d6000803e3d6000fd5b505050506040513d6020811015612a8357600080fd5b50516000546110df9061271090610ef7908690612466565b60065460408051638d8f1e6760e01b81529051612b23926001600160a01b031691638d8f1e67916004808301926020929190829003018186803b158015612ae157600080fd5b505afa158015612af5573d6000803e3d6000fd5b505050506040513d6020811015612b0b57600080fd5b50516001546110df9061271090610ef7908690612466565b6122fa6121db565b6122fa610ec5610c03565b60008184841115612bc55760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b8a578181015183820152602001612b72565b50505050905090810190601f168015612bb75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183612c1c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612b8a578181015183820152602001612b72565b506000838581612c2857fe5b0495945050505050565b6060612c87826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ce39092919063ffffffff16565b805190915015610bfe57808060200190516020811015612ca657600080fd5b5051610bfe5760405162461bcd60e51b815260040180806020018281038252602a815260200180612ead602a913960400191505060405180910390fd5b6060612cf28484600085612cfa565b949350505050565b6060612d0585612e67565b612d56576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612d955780518252601f199092019160209182019101612d76565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612df7576040519150601f19603f3d011682016040523d82523d6000602084013e612dfc565b606091505b50915091508115612e10579150612cf29050565b805115612e205780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315612b8a578181015183820152602001612b72565b3b151590565b6040518060600160405280600390602082028036833750919291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212207c26f3157d080221ed7ad343aef5de22154dc99612f4e07f8122b5cce4b8417764736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23169,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "performanceTreasuryFee",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 23175,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "performanceDevFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 23181,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "withdrawalTreasuryFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 23187,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "withdrawalDevFundFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 23192,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "want",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 23200,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "governance",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 23202,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "controller",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 23204,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "strategist",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 23206,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "timelock",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 23209,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "univ2Router2",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 23213,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "harvesters",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 24470,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "gauge",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 24472,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "curve",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 24475,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "dai",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 24478,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "usdc",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 24481,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "usdt",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 24484,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "crv",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 24487,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "keepCRV",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 24490,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "keepCRVMax",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 24135,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "three_pool",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 24138,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "three_gauge",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 24141,
        "contract": "src/strategies/polygon/curve/strategy-curve-am3crv-v2.sol:StrategyCurveAm3CRVv2",
        "label": "three_crv",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}