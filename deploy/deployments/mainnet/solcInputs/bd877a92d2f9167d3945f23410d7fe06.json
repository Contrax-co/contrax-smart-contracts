{
  "language": "Solidity",
  "sources": {
    "src/strategies/strategy-liquity-farm-base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.7;\n\nimport \"./strategy-base.sol\";\nimport \"../interfaces/liquity-reward.sol\";\n\nabstract contract StrategyLiquityFarmBase is StrategyBase {\n    // Token addresses\n    address public lqty = 0x6DEA81C8171D0bA574754EF6F8b412F2Ed88c54D;\n\n    // WETH/<token1> pair\n    address public token1;\n\n    // How much LQTY tokens to keep?\n    uint256 public keepLQTY = 0;\n    uint256 public constant keepLQTYMax = 10000;\n\n    address public rewards;\n\n    constructor(\n        address _token1,\n        address _rewards,\n        address _lp,\n        address _governance,\n        address _strategist,\n        address _controller,\n        address _timelock\n    )\n        public\n        StrategyBase(_lp, _governance, _strategist, _controller, _timelock)\n    {\n        rewards = _rewards;\n        token1 = _token1;\n\n        IERC20(lqty).safeApprove(univ2Router2, uint256(-1));\n        IERC20(weth).safeApprove(univ2Router2, uint256(-1));\n        if (token1 != lqty) {\n            IERC20(token1).safeApprove(univ2Router2, uint256(-1));\n        }\n    }\n\n    // **** Setters ****\n\n    function setKeepLQTY(uint256 _keepLQTY) external {\n        require(msg.sender == timelock, \"!timelock\");\n        keepLQTY = _keepLQTY;\n    }\n\n    // **** State Mutations ****\n\n    function harvest() public override onlyBenevolent {\n        // Anyone can harvest it at any given time.\n        // I understand the possibility of being frontrun\n        // But ETH is a dark forest, and I wanna see how this plays out\n        // i.e. will be be heavily frontrunned?\n        //      if so, a new strategy will be deployed.\n\n        // Collects LQTY tokens\n        ILiquityFarmReward(rewards).claimReward();\n        uint256 _lqty = IERC20(lqty).balanceOf(address(this));\n        if (_lqty > 0) {\n            // 10% is locked up for future gov\n            uint256 _keepLQTY = _lqty.mul(keepLQTY).div(keepLQTYMax);\n            IERC20(lqty).safeTransfer(\n                IController(controller).treasury(),\n                _keepLQTY\n            );\n            _swapUniswap(lqty, weth, _lqty.sub(_keepLQTY));\n        }\n\n        // Swap half WETH for DAI\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n        if (_weth > 0) {\n            _swapUniswap(weth, token1, _weth.div(2));\n        }\n\n        // Adds in liquidity for ETH/DAI\n        _weth = IERC20(weth).balanceOf(address(this));\n        uint256 _token1 = IERC20(token1).balanceOf(address(this));\n        if (_weth > 0 && _token1 > 0) {\n            UniswapRouterV2(univ2Router2).addLiquidity(\n                weth,\n                token1,\n                _weth,\n                _token1,\n                0,\n                0,\n                address(this),\n                now + 60\n            );\n\n            // Donates DUST\n            IERC20(weth).transfer(\n                IController(controller).treasury(),\n                IERC20(weth).balanceOf(address(this))\n            );\n            IERC20(token1).safeTransfer(\n                IController(controller).treasury(),\n                IERC20(token1).balanceOf(address(this))\n            );\n        }\n\n        // We want to get back UNI LP tokens\n        _distributePerformanceFeesAndDeposit();\n    }\n\n    function balanceOfPool() public view override returns (uint256) {\n        return ILiquityFarmReward(rewards).balanceOf(address(this));\n    }\n\n    function getHarvestable() external view returns (uint256) {\n        return ILiquityFarmReward(rewards).earned(address(this));\n    }\n\n    // **** Setters ****\n\n    function deposit() public override {\n        uint256 _want = IERC20(want).balanceOf(address(this));\n        if (_want > 0) {\n            IERC20(want).safeApprove(rewards, 0);\n            IERC20(want).safeApprove(rewards, _want);\n            ILiquityFarmReward(rewards).stake(_want);\n        }\n    }\n\n    function _withdrawSome(uint256 _amount)\n        internal\n        override\n        returns (uint256)\n    {\n        ILiquityFarmReward(rewards).withdraw(_amount);\n        return _amount;\n    }\n}\n"
    },
    "src/strategies/strategy-base.sol": {
      "content": "pragma solidity ^0.6.7;\n\nimport \"../lib/erc20.sol\";\nimport \"../lib/safe-math.sol\";\n\nimport \"../interfaces/jar.sol\";\nimport \"../interfaces/staking-rewards.sol\";\nimport \"../interfaces/masterchef.sol\";\nimport \"../interfaces/uniswapv2.sol\";\nimport \"../interfaces/controller.sol\";\n\n// Strategy Contract Basics\n\nabstract contract StrategyBase {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    // Perfomance fees - start with 20%\n    uint256 public performanceTreasuryFee = 2000;\n    uint256 public constant performanceTreasuryMax = 10000;\n\n    uint256 public performanceDevFee = 0;\n    uint256 public constant performanceDevMax = 10000;\n\n    // Withdrawal fee 0%\n    // - 0% to treasury\n    // - 0% to dev fund\n    uint256 public withdrawalTreasuryFee = 0;\n    uint256 public constant withdrawalTreasuryMax = 100000;\n\n    uint256 public withdrawalDevFundFee = 0;\n    uint256 public constant withdrawalDevFundMax = 100000;\n\n    // Tokens\n    address public want;\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    // User accounts\n    address public governance;\n    address public controller;\n    address public strategist;\n    address public timelock;\n\n    // Dex\n    address public univ2Router2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address public sushiRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\n\n    mapping(address => bool) public harvesters;\n\n    constructor(\n        address _want,\n        address _governance,\n        address _strategist,\n        address _controller,\n        address _timelock\n    ) public {\n        require(_want != address(0));\n        require(_governance != address(0));\n        require(_strategist != address(0));\n        require(_controller != address(0));\n        require(_timelock != address(0));\n\n        want = _want;\n        governance = _governance;\n        strategist = _strategist;\n        controller = _controller;\n        timelock = _timelock;\n    }\n\n    // **** Modifiers **** //\n\n    modifier onlyBenevolent {\n        require(\n            harvesters[msg.sender] ||\n                msg.sender == governance ||\n                msg.sender == strategist\n        );\n        _;\n    }\n\n    // **** Views **** //\n\n    function balanceOfWant() public view returns (uint256) {\n        return IERC20(want).balanceOf(address(this));\n    }\n\n    function balanceOfPool() public virtual view returns (uint256);\n\n    function balanceOf() public view returns (uint256) {\n        return balanceOfWant().add(balanceOfPool());\n    }\n\n    function getName() external virtual pure returns (string memory);\n\n    // **** Setters **** //\n\n    function whitelistHarvesters(address[] calldata _harvesters) external {\n        require(msg.sender == governance ||\n             msg.sender == strategist || harvesters[msg.sender], \"not authorized\");\n             \n        for (uint i = 0; i < _harvesters.length; i ++) {\n            harvesters[_harvesters[i]] = true;\n        }\n    }\n\n    function revokeHarvesters(address[] calldata _harvesters) external {\n        require(msg.sender == governance ||\n             msg.sender == strategist, \"not authorized\");\n\n        for (uint i = 0; i < _harvesters.length; i ++) {\n            harvesters[_harvesters[i]] = false;\n        }\n    }\n\n    function setWithdrawalDevFundFee(uint256 _withdrawalDevFundFee) external {\n        require(msg.sender == timelock, \"!timelock\");\n        withdrawalDevFundFee = _withdrawalDevFundFee;\n    }\n\n    function setWithdrawalTreasuryFee(uint256 _withdrawalTreasuryFee) external {\n        require(msg.sender == timelock, \"!timelock\");\n        withdrawalTreasuryFee = _withdrawalTreasuryFee;\n    }\n\n    function setPerformanceDevFee(uint256 _performanceDevFee) external {\n        require(msg.sender == timelock, \"!timelock\");\n        performanceDevFee = _performanceDevFee;\n    }\n\n    function setPerformanceTreasuryFee(uint256 _performanceTreasuryFee)\n        external\n    {\n        require(msg.sender == timelock, \"!timelock\");\n        performanceTreasuryFee = _performanceTreasuryFee;\n    }\n\n    function setStrategist(address _strategist) external {\n        require(msg.sender == governance, \"!governance\");\n        strategist = _strategist;\n    }\n\n    function setGovernance(address _governance) external {\n        require(msg.sender == governance, \"!governance\");\n        governance = _governance;\n    }\n\n    function setTimelock(address _timelock) external {\n        require(msg.sender == timelock, \"!timelock\");\n        timelock = _timelock;\n    }\n\n    function setController(address _controller) external {\n        require(msg.sender == timelock, \"!timelock\");\n        controller = _controller;\n    }\n\n    // **** State mutations **** //\n    function deposit() public virtual;\n\n    // Controller only function for creating additional rewards from dust\n    function withdraw(IERC20 _asset) external returns (uint256 balance) {\n        require(msg.sender == controller, \"!controller\");\n        require(want != address(_asset), \"want\");\n        balance = _asset.balanceOf(address(this));\n        _asset.safeTransfer(controller, balance);\n    }\n\n    // Withdraw partial funds, normally used with a jar withdrawal\n    function withdraw(uint256 _amount) external {\n        require(msg.sender == controller, \"!controller\");\n        uint256 _balance = IERC20(want).balanceOf(address(this));\n        if (_balance < _amount) {\n            _amount = _withdrawSome(_amount.sub(_balance));\n            _amount = _amount.add(_balance);\n        }\n\n        uint256 _feeDev = _amount.mul(withdrawalDevFundFee).div(\n            withdrawalDevFundMax\n        );\n        IERC20(want).safeTransfer(IController(controller).devfund(), _feeDev);\n\n        uint256 _feeTreasury = _amount.mul(withdrawalTreasuryFee).div(\n            withdrawalTreasuryMax\n        );\n        IERC20(want).safeTransfer(\n            IController(controller).treasury(),\n            _feeTreasury\n        );\n\n        address _jar = IController(controller).jars(address(want));\n        require(_jar != address(0), \"!jar\"); // additional protection so we don't burn the funds\n\n        IERC20(want).safeTransfer(_jar, _amount.sub(_feeDev).sub(_feeTreasury));\n    }\n\n    // Withdraw funds, used to swap between strategies\n    function withdrawForSwap(uint256 _amount)\n        external\n        returns (uint256 balance)\n    {\n        require(msg.sender == controller, \"!controller\");\n        _withdrawSome(_amount);\n\n        balance = IERC20(want).balanceOf(address(this));\n\n        address _jar = IController(controller).jars(address(want));\n        require(_jar != address(0), \"!jar\");\n        IERC20(want).safeTransfer(_jar, balance);\n    }\n\n    // Withdraw all funds, normally used when migrating strategies\n    function withdrawAll() external returns (uint256 balance) {\n        require(msg.sender == controller, \"!controller\");\n        _withdrawAll();\n\n        balance = IERC20(want).balanceOf(address(this));\n\n        address _jar = IController(controller).jars(address(want));\n        require(_jar != address(0), \"!jar\"); // additional protection so we don't burn the funds\n        IERC20(want).safeTransfer(_jar, balance);\n    }\n\n    function _withdrawAll() internal {\n        _withdrawSome(balanceOfPool());\n    }\n\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\n\n    function harvest() public virtual;\n\n    // **** Emergency functions ****\n\n    function execute(address _target, bytes memory _data)\n        public\n        payable\n        returns (bytes memory response)\n    {\n        require(msg.sender == timelock, \"!timelock\");\n        require(_target != address(0), \"!target\");\n\n        // call contract in current context\n        assembly {\n            let succeeded := delegatecall(\n                sub(gas(), 5000),\n                _target,\n                add(_data, 0x20),\n                mload(_data),\n                0,\n                0\n            )\n            let size := returndatasize()\n\n            response := mload(0x40)\n            mstore(\n                0x40,\n                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\n            )\n            mstore(response, size)\n            returndatacopy(add(response, 0x20), 0, size)\n\n            switch iszero(succeeded)\n                case 1 {\n                    // throw if delegatecall failed\n                    revert(add(response, 0x20), size)\n                }\n        }\n    }\n\n    // **** Internal functions ****\n    function _swapUniswap(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal {\n        require(_to != address(0));\n\n        address[] memory path;\n\n        if (_from == weth || _to == weth) {\n            path = new address[](2);\n            path[0] = _from;\n            path[1] = _to;\n        } else {\n            path = new address[](3);\n            path[0] = _from;\n            path[1] = weth;\n            path[2] = _to;\n        }\n\n        UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\n            _amount,\n            0,\n            path,\n            address(this),\n            now.add(60)\n        );\n    }\n\n    function _swapUniswapWithPath(\n        address[] memory path,\n        uint256 _amount\n    ) internal {\n        require(path[1] != address(0));\n\n        UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\n            _amount,\n            0,\n            path,\n            address(this),\n            now.add(60)\n        );\n    }\n\n    function _swapSushiswap(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal {\n        require(_to != address(0));\n\n        address[] memory path;\n\n        if (_from == weth || _to == weth) {\n            path = new address[](2);\n            path[0] = _from;\n            path[1] = _to;\n        } else {\n            path = new address[](3);\n            path[0] = _from;\n            path[1] = weth;\n            path[2] = _to;\n        }\n\n        UniswapRouterV2(sushiRouter).swapExactTokensForTokens(\n            _amount,\n            0,\n            path,\n            address(this),\n            now.add(60)\n        );\n    }\n\n    function _swapSushiswapWithPath(\n        address[] memory path,\n        uint256 _amount\n    ) internal {\n        require(path[1] != address(0));\n\n        UniswapRouterV2(sushiRouter).swapExactTokensForTokens(\n            _amount,\n            0,\n            path,\n            address(this),\n            now.add(60)\n        );\n    }\n\n    function _distributePerformanceFeesAndDeposit() internal {\n        uint256 _want = IERC20(want).balanceOf(address(this));\n\n        if (_want > 0) {\n            // Treasury fees\n            IERC20(want).safeTransfer(\n                IController(controller).treasury(),\n                _want.mul(performanceTreasuryFee).div(performanceTreasuryMax)\n            );\n\n            // Performance fee\n            IERC20(want).safeTransfer(\n                IController(controller).devfund(),\n                _want.mul(performanceDevFee).div(performanceDevMax)\n            );\n\n            deposit();\n        }\n    }\n}\n"
    },
    "src/interfaces/liquity-reward.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\ninterface ILiquityFarmReward {\n  function balanceOf(address account) external view returns (uint256);\n\n  function earned(address account) external view returns (uint256);\n\n  function exit() external;\n\n  function claimReward() external;\n\n  function stake(uint256 amount) external;\n\n  function withdraw(uint256 amount) external;\n}\n"
    },
    "src/lib/erc20.sol": {
      "content": "\n// File: contracts/GSN/Context.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./safe-math.sol\";\nimport \"./context.sol\";\n\n// File: contracts/token/ERC20/IERC20.sol\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/utils/Address.sol\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: contracts/token/ERC20/ERC20.sol\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
    },
    "src/lib/safe-math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"
    },
    "src/interfaces/jar.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\nimport \"../lib/erc20.sol\";\n\ninterface IJar is IERC20 {\n    function token() external view returns (address);\n\n    function claimInsurance() external; // NOTE: Only yDelegatedVault implements this\n\n    function getRatio() external view returns (uint256);\n\n    function depositAll() external;\n\n    function deposit(uint256) external;\n\n    function withdrawAll() external;\n\n    function withdraw(uint256) external;\n\n    function earn() external;\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "src/interfaces/staking-rewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\ninterface IStakingRewards {\n    function balanceOf(address account) external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function exit() external;\n\n    function getReward() external;\n\n    function getRewardForDuration() external view returns (uint256);\n\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function lastUpdateTime() external view returns (uint256);\n\n    function notifyRewardAmount(uint256 reward) external;\n\n    function periodFinish() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function rewardPerTokenStored() external view returns (uint256);\n\n    function rewardRate() external view returns (uint256);\n\n    function rewards(address) external view returns (uint256);\n\n    function rewardsDistribution() external view returns (address);\n\n    function rewardsDuration() external view returns (uint256);\n\n    function rewardsToken() external view returns (address);\n\n    function stake(uint256 amount) external;\n\n    function deposit(uint256 amount) external;\n\n    function stakeWithPermit(\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function stakingToken() external view returns (address);\n\n    function totalSupply() external view returns (uint256);\n\n    function userRewardPerTokenPaid(address) external view returns (uint256);\n\n    function withdraw(uint256 amount) external;\n}\n\ninterface IStakingRewardsFactory {\n    function deploy(address stakingToken, uint256 rewardAmount) external;\n\n    function isOwner() external view returns (bool);\n\n    function notifyRewardAmount(address stakingToken) external;\n\n    function notifyRewardAmounts() external;\n\n    function owner() external view returns (address);\n\n    function renounceOwnership() external;\n\n    function rewardsToken() external view returns (address);\n\n    function stakingRewardsGenesis() external view returns (uint256);\n\n    function stakingRewardsInfoByStakingToken(address)\n        external\n        view\n        returns (address stakingRewards, uint256 rewardAmount);\n\n    function stakingTokens(uint256) external view returns (address);\n\n    function transferOwnership(address newOwner) external;\n}\n"
    },
    "src/interfaces/masterchef.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.7;\n\ninterface IMasterchef {\n    function BONUS_MULTIPLIER() external view returns (uint256);\n\n    function add(\n        uint256 _allocPoint,\n        address _lpToken,\n        bool _withUpdate\n    ) external;\n\n    function bonusEndBlock() external view returns (uint256);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function dev(address _devaddr) external;\n\n    function devFundDivRate() external view returns (uint256);\n\n    function devaddr() external view returns (address);\n\n    function emergencyWithdraw(uint256 _pid) external;\n\n    function getMultiplier(uint256 _from, uint256 _to)\n        external\n        view\n        returns (uint256);\n\n    function massUpdatePools() external;\n\n    function owner() external view returns (address);\n\n    function pendingPickle(uint256 _pid, address _user)\n        external\n        view\n        returns (uint256);\n\n    function pickle() external view returns (address);\n\n    function picklePerBlock() external view returns (uint256);\n\n    function poolInfo(uint256)\n        external\n        view\n        returns (\n            address lpToken,\n            uint256 allocPoint,\n            uint256 lastRewardBlock,\n            uint256 accPicklePerShare\n        );\n\n    function poolLength() external view returns (uint256);\n\n    function renounceOwnership() external;\n\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) external;\n\n    function setBonusEndBlock(uint256 _bonusEndBlock) external;\n\n    function setDevFundDivRate(uint256 _devFundDivRate) external;\n\n    function setPicklePerBlock(uint256 _picklePerBlock) external;\n\n    function startBlock() external view returns (uint256);\n\n    function totalAllocPoint() external view returns (uint256);\n\n    function transferOwnership(address newOwner) external;\n\n    function updatePool(uint256 _pid) external;\n\n    function userInfo(uint256, address)\n        external\n        view\n        returns (uint256 amount, uint256 rewardDebt);\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n}\n"
    },
    "src/interfaces/uniswapv2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\ninterface UniswapRouterV2 {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n}\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}\n"
    },
    "src/interfaces/controller.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\ninterface IController {\n    function jars(address) external view returns (address);\n\n    function rewards() external view returns (address);\n\n    function devfund() external view returns (address);\n\n    function treasury() external view returns (address);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function withdraw(address, uint256) external;\n\n    function earn(address, uint256) external;\n}\n"
    },
    "src/lib/context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "src/strategies/liquity/strategy-uni-lusd-eth-lp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.7;\n\nimport \"../strategy-liquity-farm-base.sol\";\n\ncontract StrategyLusdEthLp is StrategyLiquityFarmBase {\n    // Token addresses\n    address public lqty_rewards = 0xd37a77E71ddF3373a79BE2eBB76B6c4808bDF0d5;\n    address public uni_lusd_eth_lp = 0xF20EF17b889b437C151eB5bA15A47bFc62bfF469;\n    address public lusd = 0x5f98805A4E8be255a32880FDeC7F6728C6568bA0;\n\n    constructor(\n        address _governance,\n        address _strategist,\n        address _controller,\n        address _timelock\n    )\n        public\n        StrategyLiquityFarmBase(\n            lusd,\n            lqty_rewards,\n            uni_lusd_eth_lp,\n            _governance,\n            _strategist,\n            _controller,\n            _timelock\n        )\n    {}\n\n    // **** Views ****\n\n    function getName() external pure override returns (string memory) {\n        return \"StrategyLusdEthLp\";\n    }\n}\n"
    },
    "src/tests/strategies/liquity/strategy-uni-lusd-eth.test.sol": {
      "content": "pragma solidity ^0.6.7;\n\nimport \"../../lib/test-strategy-uni-farm-base.sol\";\n\nimport \"../../../interfaces/strategy.sol\";\nimport \"../../../interfaces/curve.sol\";\nimport \"../../../interfaces/uniswapv2.sol\";\n\nimport \"../../../pickle-jar.sol\";\nimport \"../../../controller-v4.sol\";\nimport \"../../../strategies/liquity/strategy-uni-lusd-eth-lp.sol\";\n\ncontract StrategyLusdEthLpTest is StrategyUniFarmTestBase {\n    function setUp() public {\n        want = 0xF20EF17b889b437C151eB5bA15A47bFc62bfF469;\n        token1 = 0x5f98805A4E8be255a32880FDeC7F6728C6568bA0;\n\n        governance = address(this);\n        strategist = address(this);\n        devfund = address(new User());\n        treasury = address(new User());\n        timelock = address(this);\n\n        controller = new ControllerV4(\n            governance,\n            strategist,\n            timelock,\n            devfund,\n            treasury\n        );\n\n        strategy = IStrategy(\n            address(\n                new StrategyLusdEthLp(\n                    governance,\n                    strategist,\n                    address(controller),\n                    timelock\n                )\n            )\n        );\n\n        pickleJar = new PickleJar(\n            strategy.want(),\n            governance,\n            timelock,\n            address(controller)\n        );\n\n        controller.setJar(strategy.want(), address(pickleJar));\n        controller.approveStrategy(strategy.want(), address(strategy));\n        controller.setStrategy(strategy.want(), address(strategy));\n\n        // Set time\n        hevm.warp(startTime);\n    }\n\n    // **** Tests ****\n\n    function test_lusd_eth_timelock() public {\n        _test_timelock();\n    }\n\n    function test_lusd_eth_withdraw_release() public {\n        _test_withdraw_release();\n    }\n\n    function test_lusd_eth_get_earn_harvest_rewards() public {\n        _test_get_earn_harvest_rewards();\n    }\n}\n"
    },
    "src/tests/lib/test-strategy-uni-farm-base.sol": {
      "content": "pragma solidity ^0.6.7;\n\nimport \"../lib/hevm.sol\";\nimport \"../lib/user.sol\";\nimport \"../lib/test-approx.sol\";\nimport \"../lib/test-defi-base.sol\";\n\nimport \"../../interfaces/strategy.sol\";\nimport \"../../interfaces/curve.sol\";\nimport \"../../interfaces/uniswapv2.sol\";\n\nimport \"../../pickle-jar.sol\";\nimport \"../../controller-v4.sol\";\n\ncontract StrategyUniFarmTestBase is DSTestDefiBase {\n    address want;\n    address token1;\n\n    address governance;\n    address strategist;\n    address timelock;\n\n    address devfund;\n    address treasury;\n\n    PickleJar pickleJar;\n    ControllerV4 controller;\n    IStrategy strategy;\n\n    function _getWant(uint256 ethAmount, uint256 amount) internal {\n        _getERC20(token1, amount);\n\n        uint256 _token1 = IERC20(token1).balanceOf(address(this));\n\n        IERC20(token1).safeApprove(address(univ2), 0);\n        IERC20(token1).safeApprove(address(univ2), _token1);\n\n        univ2.addLiquidityETH{value: ethAmount}(\n            token1,\n            _token1,\n            0,\n            0,\n            address(this),\n            now + 60\n        );\n    }\n\n    // **** Tests ****\n\n    function _test_timelock() internal {\n        assertTrue(strategy.timelock() == timelock);\n        strategy.setTimelock(address(1));\n        assertTrue(strategy.timelock() == address(1));\n    }\n\n    function _test_withdraw_release() internal {\n        uint256 decimals = ERC20(token1).decimals();\n        _getWant(10 ether, 4000 * (10**decimals));\n        uint256 _want = IERC20(want).balanceOf(address(this));\n        IERC20(want).safeApprove(address(pickleJar), 0);\n        IERC20(want).safeApprove(address(pickleJar), _want);\n        pickleJar.deposit(_want);\n        pickleJar.earn();\n        hevm.warp(block.timestamp + 1 weeks);\n        strategy.harvest();\n\n        // Checking withdraw\n        uint256 _before = IERC20(want).balanceOf(address(pickleJar));\n        controller.withdrawAll(want);\n        uint256 _after = IERC20(want).balanceOf(address(pickleJar));\n        assertTrue(_after > _before);\n        _before = IERC20(want).balanceOf(address(this));\n        pickleJar.withdrawAll();\n        _after = IERC20(want).balanceOf(address(this));\n        assertTrue(_after > _before);\n\n        // Check if we gained interest\n        assertTrue(_after > _want);\n    }\n\n    function _test_get_earn_harvest_rewards() internal {\n        uint256 decimals = ERC20(token1).decimals();\n        _getWant(10 ether, 4000 * (10**decimals));\n        uint256 _want = IERC20(want).balanceOf(address(this));\n        IERC20(want).safeApprove(address(pickleJar), 0);\n        IERC20(want).safeApprove(address(pickleJar), _want);\n        pickleJar.deposit(_want);\n        pickleJar.earn();\n        hevm.warp(block.timestamp + 1 weeks);\n\n        // Call the harvest function\n        uint256 _before = pickleJar.balance();\n        uint256 _treasuryBefore = IERC20(want).balanceOf(treasury);\n        strategy.harvest();\n        uint256 _after = pickleJar.balance();\n        uint256 _treasuryAfter = IERC20(want).balanceOf(treasury);\n\n        uint256 earned = _after.sub(_before).mul(1000).div(800);\n        uint256 earnedRewards = earned.mul(200).div(1000); // 20%\n        uint256 actualRewardsEarned = _treasuryAfter.sub(_treasuryBefore);\n\n        // 20% performance fee is given\n        assertEqApprox(earnedRewards, actualRewardsEarned);\n\n        // Withdraw\n        uint256 _devBefore = IERC20(want).balanceOf(devfund);\n        _treasuryBefore = IERC20(want).balanceOf(treasury);\n        uint256 _stratBal = strategy.balanceOf();\n        pickleJar.withdrawAll();\n        uint256 _devAfter = IERC20(want).balanceOf(devfund);\n        _treasuryAfter = IERC20(want).balanceOf(treasury);\n\n        // 0% goes to dev\n        uint256 _devFund = _devAfter.sub(_devBefore);\n        assertEq(_devFund, 0);\n\n        // 0% goes to treasury\n        uint256 _treasuryFund = _treasuryAfter.sub(_treasuryBefore);\n        assertEq(_treasuryFund, 0);\n    }\n}\n"
    },
    "src/interfaces/strategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\ninterface IStrategy {\n    function rewards() external view returns (address);\n\n    function gauge() external view returns (address);\n\n    function want() external view returns (address);\n\n    function timelock() external view returns (address);\n\n    function deposit() external;\n\n    function withdrawForSwap(uint256) external returns (uint256);\n\n    function withdraw(address) external;\n\n    function withdraw(uint256) external;\n\n    function skim() external;\n\n    function withdrawAll() external returns (uint256);\n\n    function balanceOf() external view returns (uint256);\n\n    function harvest() external;\n\n    function setTimelock(address) external;\n\n    function setController(address _controller) external;\n\n    function execute(address _target, bytes calldata _data)\n        external\n        payable\n        returns (bytes memory response);\n\n    function execute(bytes calldata _data)\n        external\n        payable\n        returns (bytes memory response);\n}\n"
    },
    "src/interfaces/curve.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.7;\n\ninterface ICurveFi_2 {\n    function get_virtual_price() external view returns (uint256);\n\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\n        external;\n\n    function remove_liquidity_imbalance(\n        uint256[2] calldata amounts,\n        uint256 max_burn_amount\n    ) external;\n\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts)\n        external;\n\n    function exchange(\n        int128 from,\n        int128 to,\n        uint256 _from_amount,\n        uint256 _min_to_amount\n    ) external;\n\n    function balances(int128) external view returns (uint256);\n}\n\ninterface ICurveFi_3 {\n    function get_virtual_price() external view returns (uint256);\n\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\n        external;\n\n    function remove_liquidity_imbalance(\n        uint256[3] calldata amounts,\n        uint256 max_burn_amount\n    ) external;\n\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts)\n        external;\n\n    function exchange(\n        int128 from,\n        int128 to,\n        uint256 _from_amount,\n        uint256 _min_to_amount\n    ) external;\n\n    function balances(uint256) external view returns (uint256);\n}\n\ninterface ICurveFi_4 {\n    function get_virtual_price() external view returns (uint256);\n\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\n        external;\n\n    // stETH pool\n    function add_liquidity(\n        uint256[2] calldata amounts,\n        uint256 min_mint_amount\n    ) external payable;\n\n    function remove_liquidity_imbalance(\n        uint256[4] calldata amounts,\n        uint256 max_burn_amount\n    ) external;\n\n    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts)\n        external;\n\n    function exchange(\n        int128 from,\n        int128 to,\n        uint256 _from_amount,\n        uint256 _min_to_amount\n    ) external;\n\n    function balances(int128) external view returns (uint256);\n}\n\ninterface ICurveZap_4 {\n    function add_liquidity(\n        uint256[4] calldata uamounts,\n        uint256 min_mint_amount\n    ) external;\n\n    function remove_liquidity(uint256 _amount, uint256[4] calldata min_uamounts)\n        external;\n\n    function remove_liquidity_imbalance(\n        uint256[4] calldata uamounts,\n        uint256 max_burn_amount\n    ) external;\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\n        external\n        returns (uint256);\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 min_uamount\n    ) external;\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 min_uamount,\n        bool donate_dust\n    ) external;\n\n    function withdraw_donated_dust() external;\n\n    function coins(int128 arg0) external returns (address);\n\n    function underlying_coins(int128 arg0) external returns (address);\n\n    function curve() external returns (address);\n\n    function token() external returns (address);\n}\n\ninterface ICurveZap {\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 min_uamount\n    ) external;\n}\n\ninterface ICurveGauge {\n    function deposit(uint256 _value) external;\n\n    function deposit(uint256 _value, address addr) external;\n\n    function balanceOf(address arg0) external view returns (uint256);\n\n    function withdraw(uint256 _value) external;\n\n    function withdraw(uint256 _value, bool claim_rewards) external;\n\n    function claim_rewards() external;\n\n    function claim_rewards(address addr) external;\n\n    function claimable_tokens(address addr) external returns (uint256);\n\n    function claimable_reward(address addr) external view returns (uint256);\n\n    function claimable_reward(address, address) external view returns (uint256);\n\n    function integrate_fraction(address arg0) external view returns (uint256);\n}\n\ninterface ICurveMintr {\n    function mint(address) external;\n\n    function minted(address arg0, address arg1) external view returns (uint256);\n}\n\ninterface ICurveVotingEscrow {\n    function locked(address arg0)\n        external\n        view\n        returns (int128 amount, uint256 end);\n\n    function locked__end(address _addr) external view returns (uint256);\n\n    function create_lock(uint256, uint256) external;\n\n    function increase_amount(uint256) external;\n\n    function increase_unlock_time(uint256 _unlock_time) external;\n\n    function withdraw() external;\n\n    function smart_wallet_checker() external returns (address);\n}\n\ninterface ICurveSmartContractChecker {\n    function wallets(address) external returns (bool);\n\n    function approveWallet(address _wallet) external;\n}\n"
    },
    "src/pickle-jar.sol": {
      "content": "// https://github.com/iearn-finance/vaults/blob/master/contracts/vaults/yVault.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.7;\n\nimport \"./interfaces/controller.sol\";\n\nimport \"./lib/erc20.sol\";\nimport \"./lib/safe-math.sol\";\n\ncontract PickleJar is ERC20 {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    IERC20 public token;\n\n    uint256 public min = 9500;\n    uint256 public constant max = 10000;\n\n    address public governance;\n    address public timelock;\n    address public controller;\n\n    constructor(address _token, address _governance, address _timelock, address _controller)\n        public\n        ERC20(\n            string(abi.encodePacked(\"pickling \", ERC20(_token).name())),\n            string(abi.encodePacked(\"p\", ERC20(_token).symbol()))\n        )\n    {\n        _setupDecimals(ERC20(_token).decimals());\n        token = IERC20(_token);\n        governance = _governance;\n        timelock = _timelock;\n        controller = _controller;\n    }\n\n    function balance() public view returns (uint256) {\n        return\n            token.balanceOf(address(this)).add(\n                IController(controller).balanceOf(address(token))\n            );\n    }\n\n    function setMin(uint256 _min) external {\n        require(msg.sender == governance, \"!governance\");\n        require(_min <= max, \"numerator cannot be greater than denominator\");\n        min = _min;\n    }\n\n    function setGovernance(address _governance) public {\n        require(msg.sender == governance, \"!governance\");\n        governance = _governance;\n    }\n\n    function setTimelock(address _timelock) public {\n        require(msg.sender == timelock, \"!timelock\");\n        timelock = _timelock;\n    }\n\n    function setController(address _controller) public {\n        require(msg.sender == timelock, \"!timelock\");\n        controller = _controller;\n    }\n\n    // Custom logic in here for how much the jars allows to be borrowed\n    // Sets minimum required on-hand to keep small withdrawals cheap\n    function available() public view returns (uint256) {\n        return token.balanceOf(address(this)).mul(min).div(max);\n    }\n\n    function earn() public {\n        uint256 _bal = available();\n        token.safeTransfer(controller, _bal);\n        IController(controller).earn(address(token), _bal);\n    }\n\n    function depositAll() external {\n        deposit(token.balanceOf(msg.sender));\n    }\n\n    function deposit(uint256 _amount) public {\n        uint256 _pool = balance();\n        uint256 _before = token.balanceOf(address(this));\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 _after = token.balanceOf(address(this));\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\n        uint256 shares = 0;\n        if (totalSupply() == 0) {\n            shares = _amount;\n        } else {\n            shares = (_amount.mul(totalSupply())).div(_pool);\n        }\n        _mint(msg.sender, shares);\n    }\n\n    function withdrawAll() external {\n        withdraw(balanceOf(msg.sender));\n    }\n\n    // Used to swap any borrowed reserve over the debt limit to liquidate to 'token'\n    function harvest(address reserve, uint256 amount) external {\n        require(msg.sender == controller, \"!controller\");\n        require(reserve != address(token), \"token\");\n        IERC20(reserve).safeTransfer(controller, amount);\n    }\n\n    // No rebalance implementation for lower fees and faster swaps\n    function withdraw(uint256 _shares) public {\n        uint256 r = (balance().mul(_shares)).div(totalSupply());\n        _burn(msg.sender, _shares);\n\n        // Check balance\n        uint256 b = token.balanceOf(address(this));\n        if (b < r) {\n            uint256 _withdraw = r.sub(b);\n            IController(controller).withdraw(address(token), _withdraw);\n            uint256 _after = token.balanceOf(address(this));\n            uint256 _diff = _after.sub(b);\n            if (_diff < _withdraw) {\n                r = b.add(_diff);\n            }\n        }\n\n        token.safeTransfer(msg.sender, r);\n    }\n\n    function getRatio() public view returns (uint256) {\n        return balance().mul(1e18).div(totalSupply());\n    }\n}\n"
    },
    "src/controller-v4.sol": {
      "content": "// https://github.com/iearn-finance/jars/blob/master/contracts/controllers/StrategyControllerV1.sol\n\npragma solidity ^0.6.7;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/controller.sol\";\n\nimport \"./lib/erc20.sol\";\nimport \"./lib/safe-math.sol\";\n\nimport \"./interfaces/jar.sol\";\nimport \"./interfaces/jar-converter.sol\";\nimport \"./interfaces/onesplit.sol\";\nimport \"./interfaces/strategy.sol\";\nimport \"./interfaces/converter.sol\";\n\ncontract ControllerV4 {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    address public constant burn = 0x000000000000000000000000000000000000dEaD;\n    address public onesplit = 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;\n\n    address public governance;\n    address public strategist;\n    address public devfund;\n    address public treasury;\n    address public timelock;\n\n    // Convenience fee 0.1%\n    uint256 public convenienceFee = 100;\n    uint256 public constant convenienceFeeMax = 100000;\n\n    mapping(address => address) public jars;\n    mapping(address => address) public strategies;\n    mapping(address => mapping(address => address)) public converters;\n    mapping(address => mapping(address => bool)) public approvedStrategies;\n    mapping(address => bool) public approvedJarConverters;\n\n    uint256 public split = 500;\n    uint256 public constant max = 10000;\n\n    constructor(\n        address _governance,\n        address _strategist,\n        address _timelock,\n        address _devfund,\n        address _treasury\n    ) public {\n        governance = _governance;\n        strategist = _strategist;\n        timelock = _timelock;\n        devfund = _devfund;\n        treasury = _treasury;\n    }\n\n    function setDevFund(address _devfund) public {\n        require(msg.sender == governance, \"!governance\");\n        devfund = _devfund;\n    }\n\n    function setTreasury(address _treasury) public {\n        require(msg.sender == governance, \"!governance\");\n        treasury = _treasury;\n    }\n\n    function setStrategist(address _strategist) public {\n        require(msg.sender == governance, \"!governance\");\n        strategist = _strategist;\n    }\n\n    function setSplit(uint256 _split) public {\n        require(msg.sender == governance, \"!governance\");\n        require(_split <= max, \"numerator cannot be greater than denominator\");\n        split = _split;\n    }\n\n    function setOneSplit(address _onesplit) public {\n        require(msg.sender == governance, \"!governance\");\n        onesplit = _onesplit;\n    }\n\n    function setGovernance(address _governance) public {\n        require(msg.sender == governance, \"!governance\");\n        governance = _governance;\n    }\n\n    function setTimelock(address _timelock) public {\n        require(msg.sender == timelock, \"!timelock\");\n        timelock = _timelock;\n    }\n\n    function setJar(address _token, address _jar) public {\n        require(\n            msg.sender == strategist || msg.sender == governance,\n            \"!strategist\"\n        );\n        require(jars[_token] == address(0), \"jar\");\n        jars[_token] = _jar;\n    }\n\n    function approveJarConverter(address _converter) public {\n        require(msg.sender == governance, \"!governance\");\n        approvedJarConverters[_converter] = true;\n    }\n\n    function revokeJarConverter(address _converter) public {\n        require(msg.sender == governance, \"!governance\");\n        approvedJarConverters[_converter] = false;\n    }\n\n    function approveStrategy(address _token, address _strategy) public {\n        require(msg.sender == timelock, \"!timelock\");\n        approvedStrategies[_token][_strategy] = true;\n    }\n\n    function revokeStrategy(address _token, address _strategy) public {\n        require(msg.sender == governance, \"!governance\");\n        require(strategies[_token] != _strategy, \"cannot revoke active strategy\");\n        approvedStrategies[_token][_strategy] = false;\n    }\n\n    function setConvenienceFee(uint256 _convenienceFee) external {\n        require(msg.sender == timelock, \"!timelock\");\n        convenienceFee = _convenienceFee;\n    }\n\n    function setStrategy(address _token, address _strategy) public {\n        require(\n            msg.sender == strategist || msg.sender == governance,\n            \"!strategist\"\n        );\n        require(approvedStrategies[_token][_strategy] == true, \"!approved\");\n\n        address _current = strategies[_token];\n        if (_current != address(0)) {\n            IStrategy(_current).withdrawAll();\n        }\n        strategies[_token] = _strategy;\n    }\n\n    function earn(address _token, uint256 _amount) public {\n        address _strategy = strategies[_token];\n        address _want = IStrategy(_strategy).want();\n        if (_want != _token) {\n            address converter = converters[_token][_want];\n            IERC20(_token).safeTransfer(converter, _amount);\n            _amount = Converter(converter).convert(_strategy);\n            IERC20(_want).safeTransfer(_strategy, _amount);\n        } else {\n            IERC20(_token).safeTransfer(_strategy, _amount);\n        }\n        IStrategy(_strategy).deposit();\n    }\n\n    function balanceOf(address _token) external view returns (uint256) {\n        return IStrategy(strategies[_token]).balanceOf();\n    }\n\n    function withdrawAll(address _token) public {\n        require(\n            msg.sender == strategist || msg.sender == governance,\n            \"!strategist\"\n        );\n        IStrategy(strategies[_token]).withdrawAll();\n    }\n\n    function inCaseTokensGetStuck(address _token, uint256 _amount) public {\n        require(\n            msg.sender == strategist || msg.sender == governance,\n            \"!governance\"\n        );\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n    }\n\n    function inCaseStrategyTokenGetStuck(address _strategy, address _token)\n        public\n    {\n        require(\n            msg.sender == strategist || msg.sender == governance,\n            \"!governance\"\n        );\n        IStrategy(_strategy).withdraw(_token);\n    }\n\n    function getExpectedReturn(\n        address _strategy,\n        address _token,\n        uint256 parts\n    ) public view returns (uint256 expected) {\n        uint256 _balance = IERC20(_token).balanceOf(_strategy);\n        address _want = IStrategy(_strategy).want();\n        (expected, ) = OneSplitAudit(onesplit).getExpectedReturn(\n            _token,\n            _want,\n            _balance,\n            parts,\n            0\n        );\n    }\n\n    // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield\n    function yearn(\n        address _strategy,\n        address _token,\n        uint256 parts\n    ) public {\n        require(\n            msg.sender == strategist || msg.sender == governance,\n            \"!governance\"\n        );\n        // This contract should never have value in it, but just incase since this is a public call\n        uint256 _before = IERC20(_token).balanceOf(address(this));\n        IStrategy(_strategy).withdraw(_token);\n        uint256 _after = IERC20(_token).balanceOf(address(this));\n        if (_after > _before) {\n            uint256 _amount = _after.sub(_before);\n            address _want = IStrategy(_strategy).want();\n            uint256[] memory _distribution;\n            uint256 _expected;\n            _before = IERC20(_want).balanceOf(address(this));\n            IERC20(_token).safeApprove(onesplit, 0);\n            IERC20(_token).safeApprove(onesplit, _amount);\n            (_expected, _distribution) = OneSplitAudit(onesplit)\n                .getExpectedReturn(_token, _want, _amount, parts, 0);\n            OneSplitAudit(onesplit).swap(\n                _token,\n                _want,\n                _amount,\n                _expected,\n                _distribution,\n                0\n            );\n            _after = IERC20(_want).balanceOf(address(this));\n            if (_after > _before) {\n                _amount = _after.sub(_before);\n                uint256 _treasury = _amount.mul(split).div(max);\n                earn(_want, _amount.sub(_treasury));\n                IERC20(_want).safeTransfer(treasury, _treasury);\n            }\n        }\n    }\n\n    function withdraw(address _token, uint256 _amount) public {\n        require(msg.sender == jars[_token], \"!jar\");\n        IStrategy(strategies[_token]).withdraw(_amount);\n    }\n\n    // Function to swap between jars\n    function swapExactJarForJar(\n        address _fromJar, // From which Jar\n        address _toJar, // To which Jar\n        uint256 _fromJarAmount, // How much jar tokens to swap\n        uint256 _toJarMinAmount, // How much jar tokens you'd like at a minimum\n        address payable[] calldata _targets,\n        bytes[] calldata _data\n    ) external returns (uint256) {\n        require(_targets.length == _data.length, \"!length\");\n\n        // Only return last response\n        for (uint256 i = 0; i < _targets.length; i++) {\n            require(_targets[i] != address(0), \"!converter\");\n            require(approvedJarConverters[_targets[i]], \"!converter\");\n        }\n\n        address _fromJarToken = IJar(_fromJar).token();\n        address _toJarToken = IJar(_toJar).token();\n\n        // Get pTokens from msg.sender\n        IERC20(_fromJar).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _fromJarAmount\n        );\n\n        // Calculate how much underlying\n        // is the amount of pTokens worth\n        uint256 _fromJarUnderlyingAmount = _fromJarAmount\n            .mul(IJar(_fromJar).getRatio())\n            .div(10**uint256(IJar(_fromJar).decimals()));\n\n        // Call 'withdrawForSwap' on Jar's current strategy if Jar\n        // doesn't have enough initial capital.\n        // This has moves the funds from the strategy to the Jar's\n        // 'earnable' amount. Enabling 'free' withdrawals\n        uint256 _fromJarAvailUnderlying = IERC20(_fromJarToken).balanceOf(\n            _fromJar\n        );\n        if (_fromJarAvailUnderlying < _fromJarUnderlyingAmount) {\n            IStrategy(strategies[_fromJarToken]).withdrawForSwap(\n                _fromJarUnderlyingAmount.sub(_fromJarAvailUnderlying)\n            );\n        }\n\n        // Withdraw from Jar\n        // Note: this is free since its still within the \"earnable\" amount\n        //       as we transferred the access\n        IERC20(_fromJar).safeApprove(_fromJar, 0);\n        IERC20(_fromJar).safeApprove(_fromJar, _fromJarAmount);\n        IJar(_fromJar).withdraw(_fromJarAmount);\n\n        // Calculate fee\n        uint256 _fromUnderlyingBalance = IERC20(_fromJarToken).balanceOf(\n            address(this)\n        );\n        uint256 _convenienceFee = _fromUnderlyingBalance.mul(convenienceFee).div(\n            convenienceFeeMax\n        );\n\n        if (_convenienceFee > 1) {\n            IERC20(_fromJarToken).safeTransfer(devfund, _convenienceFee.div(2));\n            IERC20(_fromJarToken).safeTransfer(treasury, _convenienceFee.div(2));\n        }\n\n        // Executes sequence of logic\n        for (uint256 i = 0; i < _targets.length; i++) {\n            _execute(_targets[i], _data[i]);\n        }\n\n        // Deposit into new Jar\n        uint256 _toBal = IERC20(_toJarToken).balanceOf(address(this));\n        IERC20(_toJarToken).safeApprove(_toJar, 0);\n        IERC20(_toJarToken).safeApprove(_toJar, _toBal);\n        IJar(_toJar).deposit(_toBal);\n\n        // Send Jar Tokens to user\n        uint256 _toJarBal = IJar(_toJar).balanceOf(address(this));\n        if (_toJarBal < _toJarMinAmount) {\n            revert(\"!min-jar-amount\");\n        }\n\n        IJar(_toJar).transfer(msg.sender, _toJarBal);\n\n        return _toJarBal;\n    }\n\n    function _execute(address _target, bytes memory _data)\n        internal\n        returns (bytes memory response)\n    {\n        require(_target != address(0), \"!target\");\n\n        // call contract in current context\n        assembly {\n            let succeeded := delegatecall(\n                sub(gas(), 5000),\n                _target,\n                add(_data, 0x20),\n                mload(_data),\n                0,\n                0\n            )\n            let size := returndatasize()\n\n            response := mload(0x40)\n            mstore(\n                0x40,\n                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\n            )\n            mstore(response, size)\n            returndatacopy(add(response, 0x20), 0, size)\n\n            switch iszero(succeeded)\n                case 1 {\n                    // throw if delegatecall failed\n                    revert(add(response, 0x20), size)\n                }\n        }\n    }\n}\n"
    },
    "src/tests/lib/hevm.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface Hevm {\n    function warp(uint256) external;\n    function roll(uint x) external;\n    function store(address c, bytes32 loc, bytes32 val) external;\n}"
    },
    "src/tests/lib/user.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n// Contract account to simulate another user\ncontract User {\n    function execute(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data\n    ) public payable returns (bytes memory) {\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(\n                bytes4(keccak256(bytes(signature))),\n                data\n            );\n        }\n\n        (bool success, bytes memory returnData) = target.call{value: value}(\n            callData\n        );\n        require(success, \"!user-execute\");\n\n        return returnData;\n    }\n}\n"
    },
    "src/tests/lib/test-approx.sol": {
      "content": "pragma solidity ^0.6.7;\n\nimport \"./test.sol\";\n\ncontract DSTestApprox is DSTest {\n    function assertEqApprox(uint256 a, uint256 b) internal {\n        if (a == 0 && b == 0) {\n            return;\n        }\n\n        // +/- 5%\n        uint256 bMax = (b * 105) / 100;\n        uint256 bMin = (b * 95) / 100;\n\n        if (!(a > bMin && a < bMax)) {\n            emit log_bytes32(\"Error: Wrong `a-uint` value!\");\n            emit log_named_uint(\"  Expected\", b);\n            emit log_named_uint(\"    Actual\", a);\n            fail();\n        }\n    }\n\n    function assertEqVerbose(bool a, bytes memory b) internal {\n        if (!a) {\n            emit log_bytes32(\"Error: assertion error!\");\n            emit logs(b);\n            fail();\n        }\n    }\n}\n"
    },
    "src/tests/lib/test-defi-base.sol": {
      "content": "pragma solidity ^0.6.7;\n\nimport \"../../lib/safe-math.sol\";\nimport \"../../lib/erc20.sol\";\n\nimport \"./hevm.sol\";\nimport \"./user.sol\";\nimport \"./test-approx.sol\";\n\nimport \"../../interfaces/usdt.sol\";\nimport \"../../interfaces/weth.sol\";\nimport \"../../interfaces/strategy.sol\";\nimport \"../../interfaces/curve.sol\";\nimport \"../../interfaces/uniswapv2.sol\";\n\ncontract DSTestDefiBase is DSTestApprox {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    address pickle = 0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5;\n    address burn = 0x000000000000000000000000000000000000dEaD;\n\n    address susdv2_deposit = 0xFCBa3E75865d2d561BE8D220616520c171F12851;\n\n    address susdv2_pool = 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\n    address three_pool = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n    address ren_pool = 0x93054188d876f558f4a66B2EF1d97d16eDf0895B;\n\n    address scrv = 0xC25a3A3b969415c80451098fa907EC722572917F;\n    address three_crv = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n    address ren_crv = 0x49849C98ae39Fff122806C06791Fa73784FB3675;\n\n    address eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\n    address snx = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\n    address dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    address susd = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\n    address yfi = 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e;\n    address sushi = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2;\n    address uni = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984;\n\n    address wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\n    address renbtc = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\n\n    Hevm hevm = Hevm(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);\n\n    UniswapRouterV2 univ2 = UniswapRouterV2(\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n    );\n\n    IUniswapV2Factory univ2Factory = IUniswapV2Factory(\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\n    );\n\n    ICurveFi_4 curveSusdV2 = ICurveFi_4(\n        0xA5407eAE9Ba41422680e2e00537571bcC53efBfD\n    );\n\n    uint256 startTime = block.timestamp;\n\n    receive() external payable {}\n    fallback () external payable {}\n\n    function _getERC20(address token, uint256 _amount) virtual internal {\n        address[] memory path = new address[](2);\n        path[0] = weth;\n        path[1] = token;\n\n        uint256[] memory ins = univ2.getAmountsIn(_amount, path);\n        uint256 ethAmount = ins[0];\n\n        univ2.swapETHForExactTokens{value: ethAmount}(\n            _amount,\n            path,\n            address(this),\n            now + 60\n        );\n    }\n\n    function _getERC20WithPath(address token, uint256 _amount, address[] memory path) virtual internal {\n        uint256[] memory ins = univ2.getAmountsIn(_amount, path);\n        uint256 ethAmount = ins[0];\n\n        univ2.swapETHForExactTokens{value: ethAmount}(\n            _amount,\n            path,\n            address(this),\n            now + 60\n        );\n    }\n\n    function _getERC20WithETH(address token, uint256 _ethAmount) virtual internal {\n        address[] memory path = new address[](2);\n        path[0] = weth;\n        path[1] = token;\n\n        univ2.swapExactETHForTokens{value: _ethAmount}(\n            0,\n            path,\n            address(this),\n            now + 60\n        );\n    }\n\n    function _getUniV2LPToken(address lpToken, uint256 _ethAmount) internal {\n        address token0 = IUniswapV2Pair(lpToken).token0();\n        address token1 = IUniswapV2Pair(lpToken).token1();\n\n        if (token0 != weth) {\n            _getERC20WithETH(token0, _ethAmount.div(2));\n        } else {\n            WETH(weth).deposit{value: _ethAmount.div(2)}();\n        }\n\n        if (token1 != weth) {\n            _getERC20WithETH(token1, _ethAmount.div(2));\n        } else {\n            WETH(weth).deposit{value: _ethAmount.div(2)}();\n        }\n\n        IERC20(token0).safeApprove(address(univ2), uint256(0));\n        IERC20(token0).safeApprove(address(univ2), uint256(-1));\n\n        IERC20(token1).safeApprove(address(univ2), uint256(0));\n        IERC20(token1).safeApprove(address(univ2), uint256(-1));\n        univ2.addLiquidity(\n            token0,\n            token1,\n            IERC20(token0).balanceOf(address(this)),\n            IERC20(token1).balanceOf(address(this)),\n            0,\n            0,\n            address(this),\n            now + 60\n        );\n    }\n\n    function _getUniV2LPToken(\n        address token0,\n        address token1,\n        uint256 _ethAmount\n    ) internal {\n        _getUniV2LPToken(univ2Factory.getPair(token0, token1), _ethAmount);\n    }\n\n    function _getFunctionSig(string memory sig) internal pure returns (bytes4) {\n        return bytes4(keccak256(bytes(sig)));\n    }\n\n    function _getDynamicArray(address payable one)\n        internal\n        pure\n        returns (address payable[] memory)\n    {\n        address payable[] memory targets = new address payable[](1);\n        targets[0] = one;\n\n        return targets;\n    }\n\n    function _getDynamicArray(bytes memory one)\n        internal\n        pure\n        returns (bytes[] memory)\n    {\n        bytes[] memory data = new bytes[](1);\n        data[0] = one;\n\n        return data;\n    }\n\n    function _getDynamicArray(address payable one, address payable two)\n        internal\n        pure\n        returns (address payable[] memory)\n    {\n        address payable[] memory targets = new address payable[](2);\n        targets[0] = one;\n        targets[1] = two;\n\n        return targets;\n    }\n\n    function _getDynamicArray(bytes memory one, bytes memory two)\n        internal\n        pure\n        returns (bytes[] memory)\n    {\n        bytes[] memory data = new bytes[](2);\n        data[0] = one;\n        data[1] = two;\n\n        return data;\n    }\n\n    function _getDynamicArray(\n        address payable one,\n        address payable two,\n        address payable three\n    ) internal pure returns (address payable[] memory) {\n        address payable[] memory targets = new address payable[](3);\n        targets[0] = one;\n        targets[1] = two;\n        targets[2] = three;\n\n        return targets;\n    }\n\n    function _getDynamicArray(\n        bytes memory one,\n        bytes memory two,\n        bytes memory three\n    ) internal pure returns (bytes[] memory) {\n        bytes[] memory data = new bytes[](3);\n        data[0] = one;\n        data[1] = two;\n        data[2] = three;\n\n        return data;\n    }\n}\n"
    },
    "src/tests/lib/test.sol": {
      "content": "// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.4.23;\n\ncontract DSTest {\n    event eventListener          (address target, bool exact);\n    event logs                   (bytes);\n    event log_bytes32            (bytes32);\n    event log_named_address      (bytes32 key, address val);\n    event log_named_bytes32      (bytes32 key, bytes32 val);\n    event log_named_decimal_int  (bytes32 key, int val, uint decimals);\n    event log_named_decimal_uint (bytes32 key, uint val, uint decimals);\n    event log_named_int          (bytes32 key, int val);\n    event log_named_uint         (bytes32 key, uint val);\n    event log_named_string       (bytes32 key, string val);\n\n    bool public IS_TEST;\n    bool public failed;\n\n    constructor() internal {\n        IS_TEST = true;\n    }\n\n    function fail() internal {\n        failed = true;\n    }\n\n    function expectEventsExact(address target) internal {\n        emit eventListener(target, true);\n    }\n\n    modifier logs_gas() {\n        uint startGas = gasleft();\n        _;\n        uint endGas = gasleft();\n        emit log_named_uint(\"gas\", startGas - endGas);\n    }\n\n    function assertTrue(bool condition) internal {\n        if (!condition) {\n            emit log_bytes32(\"Assertion failed\");\n            fail();\n        }\n    }\n\n    function assertEq(address a, address b) internal {\n        if (a != b) {\n            emit log_bytes32(\"Error: Wrong `address' value\");\n            emit log_named_address(\"  Expected\", b);\n            emit log_named_address(\"    Actual\", a);\n            fail();\n        }\n    }\n\n    function assertEq32(bytes32 a, bytes32 b) internal {\n        assertEq(a, b);\n    }\n\n    function assertEq(bytes32 a, bytes32 b) internal {\n        if (a != b) {\n            emit log_bytes32(\"Error: Wrong `bytes32' value\");\n            emit log_named_bytes32(\"  Expected\", b);\n            emit log_named_bytes32(\"    Actual\", a);\n            fail();\n        }\n    }\n\n    function assertEqDecimal(int a, int b, uint decimals) internal {\n        if (a != b) {\n            emit log_bytes32(\"Error: Wrong fixed-point decimal\");\n            emit log_named_decimal_int(\"  Expected\", b, decimals);\n            emit log_named_decimal_int(\"    Actual\", a, decimals);\n            fail();\n        }\n    }\n\n    function assertEqDecimal(uint a, uint b, uint decimals) internal {\n        if (a != b) {\n            emit log_bytes32(\"Error: Wrong fixed-point decimal\");\n            emit log_named_decimal_uint(\"  Expected\", b, decimals);\n            emit log_named_decimal_uint(\"    Actual\", a, decimals);\n            fail();\n        }\n    }\n\n    function assertEq(int a, int b) internal {\n        if (a != b) {\n            emit log_bytes32(\"Error: Wrong `int' value\");\n            emit log_named_int(\"  Expected\", b);\n            emit log_named_int(\"    Actual\", a);\n            fail();\n        }\n    }\n\n    function assertEq(uint a, uint b) internal {\n        if (a != b) {\n            emit log_bytes32(\"Error: Wrong `uint' value\");\n            emit log_named_uint(\"  Expected\", b);\n            emit log_named_uint(\"    Actual\", a);\n            fail();\n        }\n    }\n\n    function assertEq(string memory a, string memory b) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log_bytes32(\"Error: Wrong `string' value\");\n            emit log_named_string(\"  Expected\", b);\n            emit log_named_string(\"    Actual\", a);\n            fail();\n        }\n    }\n\n    function assertEq0(bytes memory a, bytes memory b) internal {\n        bool ok = true;\n\n        if (a.length == b.length) {\n            for (uint i = 0; i < a.length; i++) {\n                if (a[i] != b[i]) {\n                    ok = false;\n                }\n            }\n        } else {\n            ok = false;\n        }\n\n        if (!ok) {\n            emit log_bytes32(\"Error: Wrong `bytes' value\");\n            emit log_named_bytes32(\"  Expected\", \"[cannot show `bytes' value]\");\n            emit log_named_bytes32(\"  Actual\", \"[cannot show `bytes' value]\");\n            fail();\n        }\n    }\n}\n"
    },
    "src/interfaces/usdt.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// https://forum.openzeppelin.com/t/can-not-call-the-function-approve-of-the-usdt-contract/2130/2\n// USDT is gay and should be ashamed\n\npragma solidity ^0.6.0;\n\ninterface USDT {\n    function approve(address guy, uint256 wad) external;\n\n    function transfer(address _to, uint256 _value) external;\n}\n"
    },
    "src/interfaces/weth.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\ninterface WETH {\n    function name() external view returns (string memory);\n\n    function approve(address guy, uint256 wad) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) external returns (bool);\n\n    function withdraw(uint256 wad) external;\n\n    function decimals() external view returns (uint8);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function symbol() external view returns (string memory);\n\n    function transfer(address dst, uint256 wad) external returns (bool);\n\n    function deposit() external payable;\n\n    function allowance(address, address) external view returns (uint256);\n}\n"
    },
    "src/interfaces/jar-converter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\ninterface IJarConverter {\n    function convert(\n        address _refundExcess, // address to send the excess amount when adding liquidity\n        uint256 _amount, // UNI LP Amount\n        bytes calldata _data\n    ) external returns (uint256);\n}\n"
    },
    "src/interfaces/onesplit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\ninterface OneSplitAudit {\n    function getExpectedReturn(\n        address fromToken,\n        address toToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 featureFlags\n    )\n        external\n        view\n        returns (uint256 returnAmount, uint256[] memory distribution);\n\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 amount,\n        uint256 minReturn,\n        uint256[] calldata distribution,\n        uint256 featureFlags\n    ) external payable;\n}\n"
    },
    "src/interfaces/converter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\ninterface Converter {\n    function convert(address) external returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}